{"version":3,"sources":["redux/themeSlice.js","hooks/themeHooks.js","redux/menuButtonSlice.js","components/Header/DisplayToggle/DisplayToggle.js","redux/subredditDataSlice.js","redux/searchResultsSlice.js","components/Header/Searchbar/Searchbar.js","components/Header/MenuButton/MenuButton.js","redux/sortSlice.js","elements/SortButtons/SortButtons.js","redux/subredditButtonSlice.js","elements/SubredditsButton/SubredditsButton.js","elements/SubredditList/SubredditList.js","redux/arrestedButtonSlice.js","elements/ArrestedButton/ArrestedButton.js","redux/arrestedSlice.js","elements/ArrestsList/ArrestsList.js","components/Header/Header.js","components/Header/Sort/Sort.js","components/Sidebar/Sidebar.js","components/Posts/Card/UserInfo/UserInfo.js","components/Posts/Card/CardContent/PostMedia/GalleryViewer/GalleryViewer.js","components/Posts/Card/CardContent/PostMedia/PostMedia.js","components/Posts/Card/CardContent/PostText/PostText.js","components/Posts/Card/CardContent/CardContent.js","components/Posts/Card/PostInfo/PostInfo.js","components/Posts/Card/ArrestAction/ArrestAction.js","components/Posts/Card/Card.js","components/Posts/NoSearchResultsCard/NoSearchResultsCard.js","components/Posts/Posts.js","elements/RedirectToDefaultSubreddit/RedirectToDefaultSubreddit.js","containers/App/App.js","redux/store.js","index.js"],"names":["themeColors","light","background","primaryText","secondaryText","accent","border","dark","themeSlice","createSlice","name","initialState","value","reducers","toggleTheme","state","actions","selectTheme","theme","useThemeColors","useSelector","useThemeObject","property","color","styleObject","menuButtonSlice","toggleMenuButtonState","closeMenu","_menuButtonSlice$acti","selectMenuButtonState","menu","Icon","dispatch","useDispatch","toggleThemeMode","React","createElement","FaMoon","onClick","size","FaSun","DisplayToggle","className","subredditDataSlice","setSubredditData","action","payload","selectSubredditData","subredditData","searchResultsSlice","results","noResults","setSearchResults","length","clearSearchResults","_searchResultsSlice$a","selectSearchResults","searchResults","selectNoResults","Searchbar","_useState","useState","_useState2","_slicedToArray","input","setInput","_useState3","_useState4","isFocused","setIsFocused","focusStyles","boxShadow","concat","borderColor","outline","posts","onSubmit","event","preventDefault","lowercasedInput","toLowerCase","matchedPostIds","filter","post","postTitle","includes","postText","map","postId","type","onChange","target","trim","placeholder","style","onFocus","onBlur","MenuButton","buttonColor","menuButtonState","menuButtonClass","HiMenu","sortSlice","setSortOrder","selectSort","sort","Sort","accentColor","sortMethod","changeSortMethod","method","FaArrowCircleDown","FaArrowCircleUp","subredditButtonSlice","toggleSubredditButtonState","closeSubredditButton","_subredditButtonSlice","selectSubredditButtonState","subredditButton","SubredditsButton","buttonStyle","buttonText","id","StyledNavLink","styled","NavLink","_templateObject","_taggedTemplateLiteral","props","secondarytext","accentcolor","SubredditList","subredditList","subreddit","i","key","to","arrestedButtonSlice","toggleArrestedButtonState","closeArrestedButton","_arrestedButtonSlice$","selectArrestedButtonState","arrestedButton","ArrestedButton","arrestedSlice","addArrestedUser","push","removeArrestedUser","user","removeAllArrestedUsers","_arrestedSlice$action","selectArrestedUsers","arrested","ArrestsList","arrestedUsers","emptyMessage","handleRemoveUser","Fragment","Header","menuBackground","subredditButtonState","arrestedButtonState","menuContainerClass","srListContainerClass","arrestedListContainerClass","noSearchResultsNoticeClass","useEffect","SortButtons","SubredditMenu","UserInfo","_ref","_post$userData","userData","pfp","username","imageUrl","shortUrl","split","src","alt","width","height","FaUserCircle","GalleryViewer","images","currentIndex","setCurrentIndex","currentImage","FaArrowAltCircleLeft","prevIndex","FaArrowAltCircleRight","StyledLink","a","themeColor","PostMedia","galleryData","mediaMetaData","media","postHint","isVideo","urlOverridden","url","decodedUrl","he","decode","decodedUrlOverridden","galleryImages","items","item","galleryImageUrl","media_id","s","u","renderYoutubeVideo","videoUrl","oembed","html","match","videoTitle","title","allowFullScreen","renderRedditVideo","reddit_video","fallback_url","renderImage","renderImageGallery","renderUrl","href","rel","renderUrlOverridden","PostTextContainer","div","linkColor","headingColor","textColor","PostText","decodedText","sanitisedHTML","DOMPurify","sanitize","postTextRef","useRef","host","window","location","origin","current","links","getElementsByTagName","startsWith","replace","dangerouslySetInnerHTML","__html","ref","CardContent","pollData","decodedTitle","options","option","text","renderPoll","PostInfo","created","comments","karma","timeStamp","Date","unit","seconds","now","minutes","Math","round","hours","days","floor","FaYinYang","FaRegClock","FaRegComment","ArrestAction","GiHandcuffs","Card","NoSearchResultsCard","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","Posts","useParams","fetchSubreddits","_asyncToGenerator","_callee2","subredditName","response","data","_context2","console","fetch","json","children","_ref2","_callee","child","crosspost","userResponse","_context","author","num_comments","post_hint","selftext_html","is_video","poll_data","gallery_data","media_metadata","crossposts","crosspost_parent_list","url_overridden_by_dest","total_karma","icon_img","t0","_x2","apply","arguments","all","resolvedPosts","_x","scrollTo","filteredPosts","sortedSubredditData","_toConsumableArray","b","RedirectToDefaultSubreddit","navigate","useNavigate","defaultSubreddit","App","document","body","backgroundColor","pageContainer","querySelector","classList","add","remove","Router","Routes","Route","path","element","Sidebar","configureStore","reducer","themeReducer","sortReducer","menuButtonReducer","subredditButtonReducer","subredditDataReducer","arrestedReducer","arrestedButtonReducer","searchResultsReducer","ReactDOM","createRoot","getElementById","render","StrictMode","Provider","store"],"mappings":"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","file":"static/js/main.f182dc17.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const themeColors = {\n    light: {\n        background: '#ECEFF4',\n        primaryText: '#2E3440',\n        secondaryText: '#4C566A',\n        accent: '#D08770',\n        border: '#D8DEE9'\n    },\n    dark: {\n        background: '#1C1E26',\n        primaryText: '#ECEFF4',\n        secondaryText: '#88C0D0',\n        accent: '#BF616A',\n        border: '#4C566A'\n    }\n}\n\nconst themeSlice = createSlice({\n    name: 'theme',\n    initialState: { value: 'dark' },\n    reducers: {\n        toggleTheme: state => {\n            state.value = state.value === 'dark' ? 'light' : 'dark';\n        }\n    },\n});\n\nexport const { toggleTheme } = themeSlice.actions;\n\nexport const selectTheme = state => state.theme.value;\n\nexport default themeSlice.reducer;","// themeHooks.js\n\nimport { useSelector } from 'react-redux';\nimport { selectTheme, themeColors } from '../redux/themeSlice';\n\nexport const useThemeColors = () => {\n    const theme = useSelector(selectTheme);\n    return themeColors[theme];\n};\n\n\nexport const useThemeObject = (property, color) => {\n    const theme = useThemeColors();\n    let styleObject = {};\n    styleObject[property] = theme[color];\n    return styleObject;\n};\n\n","import { createSlice } from '@reduxjs/toolkit';\n\n\nconst menuButtonSlice = createSlice({\n    name: 'menuButton',\n    initialState: 'closed',\n    reducers: {\n        toggleMenuButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n        closeMenu: () => 'closed'\n    },\n});\n\nexport const { toggleMenuButtonState, closeMenu } = menuButtonSlice.actions;\n\nexport const selectMenuButtonState = state => state.menu;\n\nexport default menuButtonSlice.reducer;","// React module imports.\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n// Local imports.\nimport { toggleTheme, selectTheme } from '../../../redux/themeSlice';\n// Style imports.\nimport './DisplayToggle.css';\n\n\nconst Icon = () => {\n    const dispatch = useDispatch();\n    const theme = useSelector(selectTheme);\n\n    const toggleThemeMode = () => {\n        dispatch(toggleTheme());\n    };\n\n    return (\n        theme === 'dark' ?\n            <FaMoon color='#D9D9D9' onClick={toggleThemeMode} size={23} />\n            :\n            <FaSun color='#F2CA00' onClick={toggleThemeMode} size={23} />\n    );\n}\n\nconst DisplayToggle = () => {\n\n    return (\n        <div className='theme-icon'>\n            <Icon />\n        </div>\n    );\n}\n\nexport default DisplayToggle;\n","// subredditDataSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst subredditDataSlice = createSlice({\n  name: 'subredditData',\n  initialState: [],\n  reducers: {\n    setSubredditData: (state, action) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setSubredditData } = subredditDataSlice.actions;\n\nexport const selectSubredditData = state => state.subredditData;\n\nexport default subredditDataSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst searchResultsSlice = createSlice({\n  name: 'searchResults',\n  initialState: {\n    results: [],\n    noResults: false,\n  },\n  reducers: {\n    setSearchResults: (state, action) => {\n      state.results = action.payload;\n      state.noResults = action.payload.length === 0;\n    },\n    clearSearchResults: (state) => {\n      state.results = [];\n      state.noResults = false;\n    }\n  },\n});\n\nexport const { setSearchResults, clearSearchResults } = searchResultsSlice.actions;\n\nexport const selectSearchResults = state => state.searchResults.results;\n\nexport const selectNoResults = state => state.searchResults.noResults;\n\nexport default searchResultsSlice.reducer;\n","// React module imports.\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeColors } from '../../../hooks/themeHooks';\nimport { selectSubredditData } from '../../../redux/subredditDataSlice';\nimport { setSearchResults, clearSearchResults } from '../../../redux/searchResultsSlice';\n// Style imports.\nimport './Searchbar.css';\n\n\nconst Searchbar = () => {\n\n    const dispatch = useDispatch();\n\n    // Store state for user input.\n    const [input, setInput] = useState('');\n\n    // Store state for reactive styling.\n    const [isFocused, setIsFocused] = useState(false);\n\n    // Get variables for theme colors & other styling. \n    const themeColors = useThemeColors();\n    const secondaryText = themeColors.secondaryText;\n\n    const focusStyles = isFocused ? {\n        boxShadow: `0 0 3px 0 ${secondaryText}`,\n        borderColor: secondaryText,\n        outline: 'none',\n      } : {};\n\n    // Get posts array from state.\n    const posts = useSelector(selectSubredditData);\n\n    // Search function handlers.\n    const handleInputChange = (event) => {\n        setInput(event.target.value);\n        if (event.target.value.trim() === '') {\n            dispatch(clearSearchResults());\n        }\n    }\n\n    const handleSearch = (event) => {\n        event.preventDefault();\n        const lowercasedInput = input.toLowerCase();\n        const filteredPosts = posts.filter((post) => {\n          return (post.postTitle && post.postTitle.toLowerCase().includes(lowercasedInput)) || \n                 (post.postText && post.postText.toLowerCase().includes(lowercasedInput));\n        });\n        const matchedPostIds = filteredPosts.map((post) => (post.postId));\n          dispatch(setSearchResults(matchedPostIds));\n      }      \n    \n\n    return (\n        <form onSubmit={handleSearch}>\n            <input\n                type=\"search\"\n                value={input}\n                onChange={handleInputChange}\n                placeholder='Search...'\n                style={focusStyles}\n                onFocus={() => setIsFocused(true)}\n                onBlur={() => setIsFocused(false)}\n            />\n            <button\n                type=\"submit\"\n            >Search</button>\n        </form>\n    );\n}\n\nexport default Searchbar;","// React module imports.\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { HiMenu } from \"react-icons/hi\";\n// Local imports.\nimport { useThemeColors, useThemeObject } from '../../../hooks/themeHooks';\nimport { selectMenuButtonState, toggleMenuButtonState } from \"../../../redux/menuButtonSlice\";\n// Style imports.\nimport \"./MenuButton.css\"\n\n\nconst MenuButton = () => {\n\n    // Get theme objects and variables\n    const themeColors = useThemeColors();\n    const buttonColor = useThemeObject(\"backgroundColor\", \"primaryText\");\n    const background = themeColors.background;\n\n    // Get and manage the current menu state\n    const menuButtonState = useSelector(selectMenuButtonState);\n\n    const dispatch = useDispatch();\n\n    const toggleMenuButton = () => {\n        dispatch(toggleMenuButtonState());\n    };\n\n    // Conditional className\n    const menuButtonClass = menuButtonState === 'open' ? 'menuIcon rotate' : 'menuIcon';\n\n    return (\n        <div className=\"menuButton-container\">\n            <HiMenu\n                className={menuButtonClass}\n                style={buttonColor}\n                color={background}\n                size=\"35\"\n                onClick={toggleMenuButton}\n            />\n        </div >\n    );\n};\n\nexport default MenuButton;","import { createSlice } from '@reduxjs/toolkit';\n\n\nconst sortSlice = createSlice({\n    name: 'sort',\n    initialState: 'descending',\n    reducers: {\n        setSortOrder: (state, action) => action.payload,\n    },\n});\n\nexport const { setSortOrder } = sortSlice.actions;\n\nexport const selectSort = state => state.sort;\n\nexport default sortSlice.reducer;","// React module imports.\nimport React from \"react\";\nimport { FaArrowCircleDown, FaArrowCircleUp } from \"react-icons/fa\";\nimport { useDispatch, useSelector } from 'react-redux';\n// Local imports.\nimport { useThemeColors } from \"../../hooks/themeHooks\";\nimport { setSortOrder, selectSort } from \"../../redux/sortSlice\";\n// Style imports.\nimport './SortButtons.css';\n\n\nconst Sort = () => {\n\n    // Get theme objects and variables\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    // Get and manage the current sort order\n    const sortMethod = useSelector(selectSort);\n\n    const dispatch = useDispatch();\n\n    const changeSortMethod = (method) => () => {\n        dispatch(setSortOrder(method));\n    };\n\n    return (\n        <div className=\"arrows\">\n            <FaArrowCircleDown\n                className={`down-arrow ${sortMethod === 'descending' ? 'selected' : ''}`}\n                size={40}\n                color={accentColor}\n                onClick={changeSortMethod('descending')}\n            />\n            <FaArrowCircleUp\n                className={`up-arrow ${sortMethod === 'ascending' ? 'selected' : ''}`}\n                size={40}\n                color={accentColor}\n                onClick={changeSortMethod('ascending')}\n            />\n        </div>\n    );\n};\n\n\nexport default Sort;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst subredditButtonSlice = createSlice({\n    name: 'subredditButton',\n    initialState: 'closed',  // assuming the button starts off in the 'off' state\n    reducers: {\n        toggleSubredditButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n        closeSubredditButton: () => 'closed'\n    },\n});\n\nexport const { toggleSubredditButtonState, closeSubredditButton } = subredditButtonSlice.actions;\n\nexport const selectSubredditButtonState = state => state.subredditButton;\n\nexport default subredditButtonSlice.reducer;\n","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject, useThemeColors } from \"../../hooks/themeHooks\";\nimport { toggleSubredditButtonState } from \"../../redux/subredditButtonSlice\";\n// Style imports.\nimport './SubredditsButton.css';\n\n\nconst SubredditsButton = () => {\n\n    // Get theme objects and variables\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const themeColors = useThemeColors();\n    const buttonText = themeColors.primaryText;\n\n    const dispatch = useDispatch();\n\n    const toggleSubredditButton = () => {\n        dispatch(toggleSubredditButtonState());\n    };\n\n    return (\n        <div className=\"subreddits-button-container\">\n            <button\n                id=\"subreddits-button\"\n                type=\"button\"\n                style={buttonStyle}\n                onClick={toggleSubredditButton}\n            >\n                <span id=\"subreddits-button-label\" style={{color: buttonText}}>Subreddits</span>\n            </ button>\n        </div>\n    );\n};\n\nexport default SubredditsButton;","// React module imports.\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n// Local imports.\nimport subredditList from '../../assets/data/subreddits.json';\nimport { useThemeObject } from \"../../hooks/themeHooks\";\nimport './SubredditList.css';\n\n// Create a styled component for your links\nconst StyledNavLink = styled(NavLink)`\n    text-decoration: none;\n\n    color: ${props => props.secondarytext};\n    &.active {\n        font-weight: bold;\n        font-size: larger;\n        color: ${props => props.accentcolor};\n    }\n`;\n\nconst SubredditList = () => {\n\n    const secondaryText = useThemeObject(\"color\", \"secondaryText\");\n    const accentColor = useThemeObject(\"color\", \"accent\");\n\n    return (\n        <div>\n            <ul id=\"sr-list\" style={secondaryText}>\n                {\n                    subredditList.map((subreddit, i) => {\n                        return (\n                            <li id=\"sr-name\" key={i}>\n                                <StyledNavLink \n                                    to={`/${subreddit}`}\n                                    secondarytext={secondaryText.color}\n                                    accentcolor={accentColor.color}\n                                >\n                                    {subreddit}\n                                </StyledNavLink>\n                            </li>\n                        );\n                    })\n                }\n            </ul>\n        </div>\n    );\n}\n\nexport default SubredditList;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst arrestedButtonSlice = createSlice({\n    name: 'arrestedButton',\n    initialState: 'closed',  // assuming the button starts off in the 'off' state\n    reducers: {\n        toggleArrestedButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n        closeArrestedButton: () => 'closed'\n    },\n});\n\nexport const { toggleArrestedButtonState, closeArrestedButton } = arrestedButtonSlice.actions;\n\nexport const selectArrestedButtonState = state => state.arrestedButton;\n\nexport default arrestedButtonSlice.reducer;\n","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject, useThemeColors } from \"../../hooks/themeHooks\";\nimport { toggleArrestedButtonState } from \"../../redux/arrestedButtonSlice\";\n// Style imports.\nimport './ArrestedButton.css';\n\n\nconst ArrestedButton = () => {\n\n    // Get theme objects and variables\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const themeColors = useThemeColors();\n    const buttonText = themeColors.primaryText;\n\n    const dispatch = useDispatch();\n\n    const toggleArrestedButton = () => {\n        dispatch(toggleArrestedButtonState());\n    };\n\n    return (\n        <div className=\"arrested-button-container\">\n            <button\n                id=\"arrested-button\"\n                type=\"button\"\n                style={buttonStyle}\n                onClick={toggleArrestedButton}\n            >\n                <span id=\"arrested-button-label\" style={{color: buttonText}}>Arrested</span>\n            </ button>\n        </div>\n    );\n};\n\nexport default ArrestedButton;","import { createSlice } from '@reduxjs/toolkit';\n\nconst arrestedSlice = createSlice({\n    name: 'arrested',\n    initialState: [],\n    reducers: {\n        addArrestedUser: (state, action) => {\n            // Add a specified user tp the array.\n            state.push(action.payload);\n        },\n        removeArrestedUser: (state, action) => {\n            // Return a new state array that doesn't include the user specified in the payload\n            return state.filter(user => user !== action.payload);\n        },\n        removeAllArrestedUsers: () => {\n            // Reset state to its initial value\n            return [];\n        },\n    },\n});\n\nexport const { addArrestedUser, removeArrestedUser, removeAllArrestedUsers } = arrestedSlice.actions;\n\nexport const selectArrestedUsers = state => state.arrested;\n\nexport default arrestedSlice.reducer;\n","// React module imports.\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// Local imports.\nimport { removeArrestedUser, selectArrestedUsers, removeAllArrestedUsers } from '../../redux/arrestedSlice';\nimport { useThemeObject } from '../../hooks/themeHooks';\n// Style imports.\nimport './ArrestsList.css';\n\nconst ArrestsList = () => {\n\n    const primaryText = useThemeObject(\"color\", \"primaryText\")\n    const secondaryText = useThemeObject(\"color\", \"secondaryText\");\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const buttonText = useThemeObject(\"color\", \"primaryText\");\n    const arrestedUsers = useSelector(selectArrestedUsers);\n    const emptyMessage = arrestedUsers.length === 0 ? \"No Users Currently Arrested\" : \"Tap Username to Release\";\n\n    // Use the useDispatch hook to get the dispatch function\n    const dispatch = useDispatch();\n\n\n    const handleRemoveUser = (user) => {\n        dispatch(removeArrestedUser(user));\n    }\n\n    const handleRemoveAllUsers = () => {\n        dispatch(removeAllArrestedUsers());\n    }\n\n    return (\n        <div className='arrests-list-container'>\n            <p className='empty-message' style={primaryText}>{emptyMessage}</p>\n            <ul id=\"arrests-list\" style={secondaryText}>\n                {\n                    arrestedUsers.map((user, i) => (\n                        <div key={i} className='arrested-user-container'>\n                            <li id=\"arrested-name\" onClick={() => handleRemoveUser(user)}>{user}</li>\n                        </div>\n                    ))\n                }\n            </ul>\n            {\n                arrestedUsers.length > 1 ?\n                    <button\n                        id=\"release-all\"\n                        type=\"button\"\n                        style={buttonStyle}\n                        onClick={handleRemoveAllUsers}\n                    >\n                        <span id=\"release-all-button-label\" style={buttonText}>Release All Users</span>\n                    </ button>\n                    : <></>}\n        </div>\n    );\n};\n\nexport default ArrestsList;\n","// React module imports.\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject } from '../../hooks/themeHooks';\nimport DisplayToggle from './DisplayToggle/DisplayToggle';\nimport Searchbar from './Searchbar/Searchbar';\nimport MenuButton from \"./MenuButton/MenuButton\";\nimport Sort from \"../../elements/SortButtons/SortButtons\";\nimport SubredditsButton from \"../../elements/SubredditsButton/SubredditsButton\";\nimport SubredditList from \"../../elements/SubredditList/SubredditList\";\nimport { selectMenuButtonState } from \"../../redux/menuButtonSlice\";\nimport { selectSubredditButtonState, closeSubredditButton } from \"../../redux/subredditButtonSlice\";\nimport ArrestedButton from \"../../elements/ArrestedButton/ArrestedButton\";\nimport ArrestsList from \"../../elements/ArrestsList/ArrestsList\";\nimport { selectArrestedButtonState, closeArrestedButton } from \"../../redux/arrestedButtonSlice\";\nimport { selectNoResults } from \"../../redux/searchResultsSlice\";\n// Style imports.\nimport './Header.css';\n\n\nconst Header = () => {\n\n    const background = useThemeObject(\"backgroundColor\", \"background\");\n    const accentColor = useThemeObject(\"color\", \"accent\");\n    const borderColor = useThemeObject(\"color\", \"secondaryText\");\n    const menuBackground = useThemeObject(\"backgroundColor\", \"background\");\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n\n    // Get and manage the current menu, subreddit and arrested button states\n    const menuButtonState = useSelector(selectMenuButtonState);\n    const subredditButtonState = useSelector(selectSubredditButtonState);\n    const arrestedButtonState = useSelector(selectArrestedButtonState);\n    const noResults = useSelector(selectNoResults);\n\n    const dispatch = useDispatch();\n\n    // Conditional className - Menu\n    let menuContainerClass = '';\n    if (menuButtonState === 'open') {\n        menuContainerClass = 'menu-container mobile open';\n    } else {\n        menuContainerClass = 'menu-container mobile closed';\n    }\n\n    // Conditional className - Subreddit List\n    let srListContainerClass = '';\n    if (subredditButtonState === 'open' && menuButtonState === 'open') {\n        srListContainerClass = 'sr-list-container mobile open';\n    } else {\n        srListContainerClass = 'sr-list-container mobile closed';\n    }\n\n    // Conditional className - Arrested List\n    let arrestedListContainerClass = '';\n    if (arrestedButtonState === 'open' && menuButtonState === 'open') {\n        arrestedListContainerClass = 'arrested-list-container mobile open';\n    } else {\n        arrestedListContainerClass = 'arrested-list-container mobile closed';\n    }\n\n    // Conditional className - No search results notice.\n    let noSearchResultsNoticeClass = '';\n    if (noResults && menuButtonState === 'open') {\n        noSearchResultsNoticeClass = 'no-search-results-notice mobile open';\n    } else {\n        noSearchResultsNoticeClass = 'no-search-results-notice mobile closed';\n    }\n\n    useEffect(() => {\n        if (subredditButtonState === \"open\" && arrestedButtonState === \"open\") {\n            dispatch(closeSubredditButton());\n        }\n    }, [arrestedButtonState]);\n\n    useEffect(() => {\n        if (subredditButtonState === \"open\" && arrestedButtonState === \"open\") {\n            dispatch(closeArrestedButton());\n        }\n    }, [subredditButtonState]);\n\n    useEffect(() => {\n        if (menuButtonState === 'open' && noResults) {\n            dispatch(closeArrestedButton());\n            dispatch(closeSubredditButton());\n        }\n    }, [noResults]);\n\n\n    return (\n        <div className=\"header-container\" style={background}>\n            <div className=\"header\" style={background}>\n                <h1 className=\"logo\">\n                    <span className=\"karma\" style={accentColor}>KARMA</span>\n                    <span className=\"police\" style={borderColor}>POLICE</span>\n                </h1>\n                <div className=\"rightSide desktop\">\n                    <DisplayToggle />\n                    <Searchbar />\n                </div>\n                <div className=\"menuButton mobile\">\n                    <MenuButton />\n                </div>\n            </div>\n            <div className={menuContainerClass}>\n                <div className=\"menu-block\" id=\"block-1\" style={menuBackground}>\n                    <DisplayToggle />\n                    <Searchbar />\n                </div>\n                <div className=\"menu-block\" id=\"block-2\" style={menuBackground}>\n                    <SubredditsButton />\n                    <ArrestedButton />\n                    <Sort />\n                </div>\n                <div className={srListContainerClass}>\n                    <div className=\"list-block\" id=\"block-3\" style={menuBackground}>\n                        <SubredditList />\n                    </div>\n                </div>\n                <div className={arrestedListContainerClass}>\n                    <div className=\"list-block\" id=\"block-4\" style={menuBackground}>\n                        <ArrestsList />\n                    </div>\n                </div>\n                <div className={noSearchResultsNoticeClass}>\n                    <div className=\"menu-block\" id=\"block-5\" style={menuBackground}>\n                        <p style={primaryText}>Sorry! No posts match your search term.</p>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","// React module imports. \nimport React from \"react\";\n// Local imports.\nimport SortButtons from \"../../../elements/SortButtons/SortButtons\"\nimport { useThemeObject } from \"../../../hooks/themeHooks\";\n// Style imports. \nimport './Sort.css';\n\n\nconst Sort = () => {\n\n    // Get theme objects and variables\n    const background = useThemeObject(\"backgroundColor\", \"border\");\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n\n    return (\n        <div className=\"sort\" style={background}>\n            <p id=\"sort-label\" style={primaryText}>Sort by Karma</p>\n            <SortButtons />\n        </div>\n    );\n};\n\nexport default Sort;","// React module imports.\nimport React from \"react\";\n// Local imports.\nimport { useThemeObject } from \"../../hooks/themeHooks\";\nimport SubredditList from \"../../elements/SubredditList/SubredditList\";\nimport Sort from \"../Header/Sort/Sort\";\nimport ArrestsList from \"../../elements/ArrestsList/ArrestsList\";\n// Style imports.\nimport './Sidebar.css';\n\n\nconst SubredditMenu = () => {\n\n    // Get theme objects and variables\n    const background = useThemeObject(\"backgroundColor\", \"border\");\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n\n    return (\n        <div className=\"Sidebar\">\n            <div className=\"sidebar-sort\" style={background}>\n                <Sort />\n            </div>\n            <div className=\"sidebar-sr-list\" style={background}>\n                <p className=\"sidebar-sr-label\" style={primaryText}>Subreddit</p>\n                <SubredditList />\n            </div>\n            <div className=\"sidebar-arrests-list\" style={background}>\n            <p className=\"sidebar-arrests-label\" style={primaryText}>Arrested Users</p> \n                <ArrestsList />\n            </div>\n        </div>\n    );\n};\n\nexport default SubredditMenu;\n","// React module imports.\nimport React from \"react\";\nimport { FaUserCircle } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./UserInfo.css\";\n\n\nconst UserInfo = ({ post }) => {\n\n    const {\n        userData: {\n            pfp,\n            username\n        }\n    } = post;\n\n    // Get theme colors. \n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n\n    const imageUrl = pfp;\n    const shortUrl = imageUrl && imageUrl.split(\"?\")[0];\n    const imageSize = '40px';\n    const iconSize = \"40\";\n\n\n    return (\n        <div className=\"user\">\n            {imageUrl ? (\n                <img\n                    className=\"user-pfp\"\n                    src={shortUrl}\n                    alt=\"Post Author PfP\"\n                    width={imageSize}\n                    height={imageSize}>\n                </img>\n            ) : (\n                <FaUserCircle color={accentColor} size={iconSize} />\n            )}\n            <p className=\"username\">{username}</p>\n        </div>\n    );\n};\n\nexport default UserInfo;","// React module imports.\nimport React, { useState } from \"react\";\nimport { FaArrowAltCircleLeft, FaArrowAltCircleRight } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../../../hooks/themeHooks\";\n// Style imports. \nimport './GalleryViewer.css';\n\nconst GalleryViewer = ({ images }) => {\n\n    const iconSize = \"60\";\n\n    // Get theme variables.\n    const themeColors = useThemeColors();\n    const buttonColor = themeColors.accent;\n\n    // Create and manage gallery index state.\n    const [currentIndex, setCurrentIndex] = useState(0);\n\n    const handlePrevious = () => {\n        setCurrentIndex((prevIndex) => prevIndex - 1);\n    };\n\n    const handleNext = () => {\n        setCurrentIndex((prevIndex) => prevIndex + 1);\n    };\n\n    const currentImage = images[currentIndex];\n\n    return (\n        <div className=\"gallery-viewer\">\n            {currentIndex > 0 ? (\n                <FaArrowAltCircleLeft\n                    className=\"gallery-viewer-button\"\n                    size={iconSize}\n                    color={buttonColor}\n                    onClick={handlePrevious} />\n            ) : <></>}\n\n            <img src={currentImage} alt=\"Gallery img\" />\n\n            {currentIndex < images.length - 1 ? (\n                <FaArrowAltCircleRight\n                    className=\"gallery-viewer-button\"\n                    size={iconSize}\n                    color={buttonColor}\n                    onClick={handleNext} />\n            ) : <></>}\n        </div>\n    );\n};\n\nexport default GalleryViewer;\n","// React module imports. \nimport React from \"react\";\nimport he from 'he';\nimport styled from 'styled-components';\n// Local imports.\nimport GalleryViewer from \"./GalleryViewer/GalleryViewer\";\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\n// Style imports.\nimport './PostMedia.css';\n\n// Create a styled component that will apply the theme colors.\nconst StyledLink = styled.a`\n\n    word-wrap: break-word;\n    overflow-wrap: break-word;\n\n    display: block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    max-width: 90%;\n\n    color: ${props => props.themeColor};\n\n    &:link {\n    color: ${props => props.themeColor};\n    }\n\n    &:visited {\n    color: ${props => props.themeColor};\n    }`;\n\nconst PostMedia = ({ post }) => {\n\n    const {\n        galleryData,\n        mediaMetaData,\n        media,\n        postHint,\n        isVideo,\n        urlOverridden,\n        url,\n        postTitle\n    } = post;\n\n    // Decode urls.\n    const decodedUrl = he.decode(url);\n    const decodedUrlOverridden = he.decode(url);\n\n    // Get theme colors.\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n\n    // Extract decoded URLs from galleryData\n    let galleryImages = [];\n    if (galleryData) {\n        galleryImages = galleryData.items.map((item) => {\n            const galleryImageUrl = mediaMetaData && mediaMetaData[item.media_id].s.u;\n            // Remove escaped & character encodings from URL.\n            return galleryImageUrl && he.decode(galleryImageUrl);\n        });\n    }\n\n    const renderMedia = () => {\n        if (media && media.type === \"youtube.com\") {\n            return renderYoutubeVideo();\n        } else if (media && media.reddit_video) {\n            return renderRedditVideo();\n        } else if (postHint === \"image\" && !isVideo && !media) {\n            return renderImage();\n        } else if (galleryData) {\n            return renderImageGallery();\n        } else if (postHint === \"link\") {\n            return renderUrl();\n        } else if (urlOverridden) {\n            return renderUrlOverridden();\n        } else {\n            return;\n        }\n    }\n\n    const renderYoutubeVideo = () => {\n        const videoUrl = media.oembed.html.match(/src=[\"'](.*?)[\"']/)[1];\n        const videoTitle = he.decode(media.oembed.title);\n        return (\n            <div className=\"youtube-video-container\">\n                <iframe\n                    className=\"video\"\n                    title={videoTitle}\n                    src={videoUrl}\n                    allowFullScreen>\n                </iframe>\n            </div>\n        );\n    }\n\n    const renderRedditVideo = () => {\n        const decodedUrl = he.decode(media.reddit_video.fallback_url);\n        return (\n            <div className=\"reddit-video-container\">\n                <iframe\n                    className=\"video\"\n                    title={postTitle}\n                    width={media.reddit_video.width}\n                    height={media.reddit_video.height}\n                    src={decodedUrl}>\n                </iframe>\n            </div>\n        );\n    }\n\n    const renderImage = () => {\n        return (\n            <div className=\"image-container\">\n                <img className=\"post-image\" src={decodedUrl} alt=\"\" />\n            </div>\n        );\n    }\n\n    const renderImageGallery = () => {\n        return (\n            <div className=\"image-container\">\n                {galleryImages.length > 0 && <GalleryViewer images={galleryImages} />}\n            </div>\n        );\n    }\n\n    const renderUrl = () => {\n        return (\n            <div className=\"link-container\">\n                <StyledLink href={decodedUrl} target=\"_blank\" rel=\"noopener noreferrer\" themeColor={accentColor}>\n                    {decodedUrl}\n                </StyledLink>\n            </div>\n        )\n    }\n\n    const renderUrlOverridden = () => {\n        return (\n            <div className=\"link-container\">\n                <StyledLink href={decodedUrlOverridden} target=\"_blank\" rel=\"noopener noreferrer\" themeColor={accentColor}>\n                    {decodedUrlOverridden}\n                </StyledLink>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {renderMedia()}\n        </div>\n    );\n};\n\nexport default PostMedia;","// React module imports.\nimport React, { useEffect, useRef } from \"react\";\nimport styled from 'styled-components';\nimport he from 'he';\nimport DOMPurify from 'dompurify';\n// Local imports.\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\n// Style imports. \nimport './PostText.css';\n\n// Create styled component for post text. \n// Workaround for styling child html entities whilst using dangerouslySetInnerHtml\nconst PostTextContainer = styled.div`\n    a {\n        color: ${props => props.linkColor};\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n        display: block;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        max-width: 90%;\n        margin-right: 10px\n    }\n\n    h1, h2, h3, h4, h5, h6 {\n        padding-top: 20px;\n        color: ${props => props.headingColor};\n        margin-right: 10px;\n    }\n\n    p {\n        color: ${props => props.textColor};\n        margin-left: 0px;\n    }\n\n    table {\n        width: 40%;\n    }\n\n    th {\n        color: ${props => props.headingColor};\n    }\n\n    tr {\n        color: ${props => props.textColor};\n    }\n    `;\n\nconst PostText = ({ post }) => {\n\n    // Destuctured values from post prop.\n    const {\n        postText,\n    } = post;\n\n    // Vars for text rendering.\n    let decodedText = \"\";\n    let sanitisedHTML = \"\";\n\n    // Decode and sanitise html entities from post text.\n    decodedText = postText && he.decode(postText);\n    sanitisedHTML = DOMPurify.sanitize(decodedText);\n\n    // Create a reference to the post text container. \n    const postTextRef = useRef(null);\n    const host = window.location.origin;\n    const reddit = 'https://www.reddit.com/';\n\n    useEffect(() => {\n        if (postTextRef.current) {\n            const links = postTextRef.current.getElementsByTagName('a');\n            for (let i = 0; i < links.length; i++) {\n                if (links[i].href.startsWith(host)) {\n                    links[i].href = links[i].href.replace(host, reddit);\n                }\n                links[i].target = '_blank';\n                links[i].rel = 'noopener noreferrer';\n            }\n        }\n    }, [decodedText]);\n\n\n\n    // Get theme color variables. \n    const themeColors = useThemeColors();\n\n    const linkColor = themeColors.accent;\n    const textColor = themeColors.secondaryText;\n    const headingColor = themeColors.primaryText;\n\n    return (\n        <PostTextContainer\n            className=\"post-text\"\n            dangerouslySetInnerHTML={{ __html: sanitisedHTML }}\n            linkColor={linkColor}\n            textColor={textColor}\n            headingColor={headingColor}\n            ref={postTextRef}\n        />\n    );\n};\n\nexport default PostText;\n","// React module imports.\nimport React from \"react\";\nimport he from 'he';\n// Local imports.\nimport PostMedia from \"./PostMedia/PostMedia\";\nimport PostText from \"./PostText/PostText\";\nimport { useThemeObject } from \"../../../../hooks/themeHooks\";\n// Style imports. \nimport \"./CardContent.css\";\n\nconst CardContent = ({ post }) => {\n    // Destructured values from object.\n    const {\n        postTitle,\n        pollData,\n    } = post;\n\n    // Get style variables. \n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\n\n    // Decode html entities from post title. \n    const decodedTitle = postTitle && he.decode(postTitle);\n\n    const renderPoll = () => {\n        if (pollData) {\n            return (\n                <div className=\"poll-container\">\n                    <p>Reddit Poll - Not currently voteable, click \"View Poll\" to vote on Reddit.com</p>\n                    <ul>\n                        {pollData.options.map((option) => (\n                            <li key={option.id}>{option.text}</li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <div className=\"card-content\" style={borderColor}>\n            <p className=\"post-title\">{decodedTitle}</p>\n            <PostMedia\n                post={post}\n            />\n            { renderPoll() }\n            <PostText post={post} />\n        </div>\n    );\n};\n\nexport default CardContent;\n","// React module imports.\nimport React from \"react\";\nimport { FaYinYang, FaRegClock, FaRegComment } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./PostInfo.css\";\n\n\nconst PostInfo = ({ post }) => {\n\n    const {\n        created,\n        comments,\n        userData: { karma }\n    } = post;\n\n    // Get theme colors. \n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    const iconSize = 20;\n\n    // Calculate time data. \n    let timeStamp = new Date(created * 1000);\n    let currentTime = Date.now();\n    let unit = \"\";\n    let value = 0;\n    const seconds = (currentTime - timeStamp) / 1000;\n    const minutes = Math.round(seconds / 60);\n    const hours = Math.round(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    // Determine unit to be displayed.\n    if (days > 0) {\n        unit = \"Day\";\n        value = days;\n    } if (days === 0) {\n        unit = \"Hour\";\n        value = hours;\n    } if (hours === 0) {\n        unit = \"Minute\";\n        value = minutes;\n    } if (minutes === 0) {\n        unit = \"Second\";\n        value = seconds;\n    }\n\n    // Pluralise if necessary.\n    if (value > 1) {\n        unit += 's';\n    }\n\n    return (\n        <div className=\"post-info\">\n            <div className=\"karma-score\">\n                <FaYinYang color={accentColor} size={iconSize} />\n                <span>{karma}</span>\n            </div>\n            <div className=\"post-age\">\n                <FaRegClock color={accentColor} size={iconSize} />\n                <span>{value} {unit}</span>\n            </div>\n            <div className=\"post-comments\">\n                <FaRegComment color={accentColor} size={iconSize} />\n                <span>{comments}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default PostInfo;","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { GiHandcuffs } from \"react-icons/gi\";\n// Local imports.\nimport { addArrestedUser } from \"../../../../redux/arrestedSlice\";\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./ArrestAction.css\";\n\nconst ArrestAction = ({ post }) => {\n    const {\n        userData: { username }\n    } = post;\n\n    const dispatch = useDispatch();\n\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    const handleArrest = () => { \n        dispatch(addArrestedUser(username));\n    }\n\n    const iconSize = \"40\";\n    return (\n        <div className=\"arrest\" onClick={handleArrest}>\n            <GiHandcuffs className=\"cuffs\" color={accentColor} size={iconSize} /> <span>Arrest This Man/Girl</span>\n        </div>\n    );\n};\n\nexport default ArrestAction;\n","// React module imports.\nimport React from \"react\";\n// Local imports.\nimport { useThemeObject } from '../../../hooks/themeHooks';\nimport UserInfo from \"./UserInfo/UserInfo\";\nimport CardContent from \"./CardContent/CardContent\";\nimport PostInfo from \"./PostInfo/PostInfo\";\nimport ArrestAction from \"./ArrestAction/ArrestAction\";\n// Style imports.\nimport './Card.css';\n\n// Card.js\nconst Card = ({ post }) => {\n\n    // Inline style variables.\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\n\n    return (\n        <div className=\"card-container\" style={primaryText}>\n            <UserInfo post={post} />\n            <div className=\"card\" style={borderColor}>\n                <CardContent\n                    post={post}\n                />\n                <PostInfo\n                    post={post}\n                />\n            </div>\n            <ArrestAction post={post} />\n        </div>\n    );\n};\n\nexport default Card;","// React module imports.\nimport React from \"react\";\n// Local imports.\nimport { useThemeObject } from \"../../../hooks/themeHooks\";\n// Style imports.\nimport \"./NoSearchResultsCard.css\"\n\nconst NoSearchResultsCard = () => {\n\n    // Inline style variables.\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\n\n    return (\n        <div className=\"no-search-results-card-container\" style={borderColor}>\n            <div className=\"no-search-results-card\">\n                <p style={primaryText}>Sorry! No posts match your search term.</p>\n            </div>\n        </div>\n    );\n};\n\nexport default NoSearchResultsCard;","// React module imports.\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n// Local imports. \nimport Card from './Card/Card';\nimport NoSearchResultsCard from \"./NoSearchResultsCard/NoSearchResultsCard\";\nimport { setSubredditData, selectSubredditData } from \"../../redux/subredditDataSlice\";\nimport { selectSort } from \"../../redux/sortSlice\";\nimport { selectArrestedUsers } from \"../../redux/arrestedSlice\";\nimport { selectSearchResults, selectNoResults } from \"../../redux/searchResultsSlice\";\n// Style imports.\n\n\nconst Posts = () => {\n\n    // Get and manage current subreddit and subreddit data. \n    const dispatch = useDispatch();\n    const subredditData = useSelector(selectSubredditData);\n    const arrestedUsers = useSelector(selectArrestedUsers);\n    const searchResults = useSelector(selectSearchResults);\n    const noResults = useSelector(selectNoResults);\n\n    let { subreddit } = useParams();\n    subreddit = \"r/\" + subreddit;\n\n    const fetchSubreddits = async (subreddit) => {\n\n        if (!subreddit) {\n            console.error(\"Subreddit not defined!\");\n            return;\n        }\n\n        try {\n            const subredditName = subreddit;\n            const response = await fetch(`https://www.reddit.com/${subredditName}.json`);\n            const data = await response.json();\n\n            const posts = data.data.children.map(async (child) => {\n                const post = {\n                    postId: child.data.id,\n                    postTitle: child.data.title,\n                    username: child.data.author,\n                    created: child.data.created,\n                    comments: child.data.num_comments,\n                    postHint: child.data.post_hint,\n                    url: child.data.url,\n                    postText: child.data.selftext_html,\n                    media: child.data.media,\n                    isVideo: child.data.is_video,\n                    pollData: child.data.poll_data,\n                    galleryData: child.data.gallery_data,\n                    mediaMetaData: child.data.media_metadata,\n                    crossposts: child.data.crosspost_parent_list,\n                    urlOverridden: child.data.url_overridden_by_dest\n                };\n\n                // Check if there is crosspost data & map to post data. \n                if (child.data.crosspost_parent_list) {\n                    const crosspost = child.data.crosspost_parent_list[0];\n                    post.postTitle = crosspost.title;\n                    post.created = crosspost.created;\n                    post.comments = crosspost.num_comments;\n                    post.url = crosspost.url;\n                    post.postText = crosspost.selftext_html;\n                    post.media = crosspost.media;\n                    post.isVideo = crosspost.is_video;\n                    post.pollData = crosspost.poll_data;\n                    post.galleryData = crosspost.gallery_data;\n                    post.mediaMetaData = crosspost.media_metadata;\n                    post.urlOverridden = crosspost.url_overridden_by_dest;\n                }\n\n                // Fetch and add user data. \n                try {\n                    const userResponse = await fetch(`https://www.reddit.com/user/${child.data.author}/about.json`);\n                    const userData = await userResponse.json();\n                    // Add the user data to the post, only keeping the fields we need\n                    post.userData = {\n                        username: userData.data.name,\n                        karma: userData.data.total_karma,\n                        pfp: userData.data.icon_img\n                    };\n                } catch (error) {\n                    console.error(\"Error during user fetch:\", error);\n                }\n\n                return post;\n            });\n\n            Promise.all(posts)\n                .then(resolvedPosts => {\n                    dispatch(setSubredditData(resolvedPosts));\n                });\n\n        } catch (error) {\n            console.error(\"Error during fetch:\", error);\n        }\n    };\n\n\n    // Call the fetchSubreddits function to trigger the API request and update Redux state\n    useEffect(() => {\n        fetchSubreddits(subreddit);\n        window.scrollTo(0, 0); // Go to top of page. \n    }, [subreddit]);\n\n    // Filter posts by checking if post author is in arrested users list\n    let filteredPosts = subredditData.filter(post => !arrestedUsers.includes(post.username));\n\n    // Check if there are search results and filter posts accordingly\n    if (searchResults.length > 0) {\n        filteredPosts = filteredPosts.filter(post => searchResults.includes(post.postId));\n    }\n\n    // Create a new, sorted array of posts based on sort order.\n    const sortOrder = useSelector(selectSort);\n    let sortedSubredditData = [];\n\n    if (sortOrder === \"descending\") {\n        sortedSubredditData = [...filteredPosts]\n            .sort((a, b) => b.userData.karma - a.userData.karma);\n    } else {\n        sortedSubredditData = [...filteredPosts]\n            .sort((a, b) => a.userData.karma - b.userData.karma);\n    }\n\n    return (\n        <div>\n            {noResults ? (\n                <NoSearchResultsCard />\n            ) : (\n                sortedSubredditData.length > 0 ? (\n                    sortedSubredditData.map((post, i) => (\n                        <Card\n                            post={post}\n                            key={i}\n                        />\n                    ))\n                ) : (\n                    <></> // loading card here?\n                )\n            )}\n        </div>\n    );\n};\nexport default Posts;","// React module imports.\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\n// Local imports.\nimport subredditList from '../../assets/data/subreddits.json';\n\n\nconst RedirectToDefaultSubreddit = () => {\n    const navigate = useNavigate();\n    \n    // Get first subreddit from list.\n    const defaultSubreddit = subredditList[0];\n  \n    useEffect(() => {\n        navigate(`/${defaultSubreddit}`);\n    }, [navigate]);\n\n    return null;  // This component does not render anything\n};\n\nexport default RedirectToDefaultSubreddit;","// React module imports.\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\n// Local imports.\nimport { useThemeColors, useThemeObject } from '../../hooks/themeHooks';\nimport { selectTheme } from '../../redux/themeSlice';\nimport { selectMenuButtonState, closeMenu } from '../../redux/menuButtonSlice';\nimport Header from '../../components/Header/Header';\nimport Sidebar from '../../components/Sidebar/Sidebar';\nimport Posts from '../../components/Posts/Posts';\nimport RedirectToDefaultSubreddit from '../../elements/RedirectToDefaultSubreddit/RedirectToDefaultSubreddit';\n// Style imports\nimport './App.css';\nimport '../../stylesheets/globalStyles.css';\n\n\nexport default function App() {\n\n  // Get & manage theme state and theme variables.\n  const theme = useSelector(selectTheme);\n  const themeColors = useThemeColors();\n  // Blur the site when the menu is open. \n  const menuButtonState = useSelector(selectMenuButtonState);\n\n  const dispatch = useDispatch();\n\n  // Inline style object.\n  const background = useThemeObject(\"backgroundColor\", \"background\");\n\n  // Update the CSS class of the body when the theme changes.\n  useEffect(() => {\n    document.body.className = theme;\n  }, [theme]);\n\n  // Set body element to background colour from theme.\n  document.body.style.backgroundColor = themeColors.background;\n\n  // Blur background when mobile menu is open. \n  useEffect(() => {\n    const pageContainer = document.querySelector('.main-content');\n\n    if (menuButtonState === 'open') {\n      pageContainer.classList.add('blur');\n    } else {\n      pageContainer.classList.remove('blur');\n    }\n  }, [menuButtonState]);\n\n  // Dispatch the close menu action when blurred background is tapped.\n  const handleCloseMenu = () => {\n    if (menuButtonState === 'open') {\n      dispatch(closeMenu());\n    }\n  };\n\n  return (\n    <Router>\n      <div className=\"page-container\" style={background}>\n        <div className=\"container-wrap\">\n          <div className=\"App\">\n            <Header />\n            <div\n              className={`menu-overlay ${menuButtonState === 'open' ? 'visible' : ''}`}\n              onClick={handleCloseMenu}\n            />\n            <div className='main-content'>\n              <Routes>\n                <Route path=\"/r/:subreddit\" element={<Posts />} />\n                <Route path=\"/\" element={<RedirectToDefaultSubreddit />} />\n              </Routes>\n            </div>\n            <div className='sidebar-container desktop'>\n              <Sidebar />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n};","import { configureStore } from '@reduxjs/toolkit';\nimport themeReducer from './themeSlice';\nimport sortReducer from './sortSlice';\nimport menuButtonReducer from './menuButtonSlice';\nimport subredditButtonReducer from './subredditButtonSlice';\nimport subredditDataReducer from './subredditDataSlice';\nimport arrestedReducer from './arrestedSlice';\nimport arrestedButtonReducer from './arrestedButtonSlice';\nimport searchResultsReducer from './searchResultsSlice';\n\n\nexport default configureStore({\n  reducer: {\n    theme: themeReducer,\n    sort: sortReducer,\n    menu: menuButtonReducer,\n    subredditButton: subredditButtonReducer,\n    subredditData: subredditDataReducer,\n    arrested: arrestedReducer,\n    arrestedButton: arrestedButtonReducer,\n    searchResults: searchResultsReducer\n  },\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './stylesheets/reset.css';\nimport './stylesheets/index.css';\nimport './stylesheets/globalStyles.css';\nimport App from './containers/App/App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}