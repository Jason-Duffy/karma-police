{"version":3,"sources":["redux/themeSlice.js","hooks/themeHooks.js","redux/menuButtonSlice.js","components/Header/DisplayToggle/DisplayToggle.js","redux/subredditDataSlice.js","redux/searchResultsSlice.js","components/Header/Searchbar/Searchbar.js","components/Header/MenuButton/MenuButton.js","redux/sortSlice.js","elements/SortButtons/SortButtons.js","redux/subredditButtonSlice.js","elements/SubredditsButton/SubredditsButton.js","redux/subredditSlice.js","elements/SubredditList/SubredditList.js","redux/arrestedButtonSlice.js","elements/ArrestedButton/ArrestedButton.js","redux/arrestedSlice.js","elements/ArrestsList/ArrestsList.js","components/Header/Header.js","components/Header/Sort/Sort.js","components/Sidebar/Sidebar.js","components/Posts/Card/UserInfo/UserInfo.js","components/Posts/Card/CardContent/PostMedia/GalleryViewer/GalleryViewer.js","components/Posts/Card/CardContent/PostMedia/PostMedia.js","components/Posts/Card/CardContent/PostText/PostText.js","components/Posts/Card/CardContent/CardContent.js","components/Posts/Card/PostInfo/PostInfo.js","components/Posts/Card/ArrestAction/ArrestAction.js","components/Posts/Card/Card.js","components/Posts/Posts.js","containers/App/App.js","redux/store.js","index.js"],"names":["themeColors","light","background","primaryText","secondaryText","accent","border","dark","themeSlice","createSlice","name","initialState","value","reducers","toggleTheme","state","actions","selectTheme","theme","useThemeColors","useSelector","useThemeObject","property","color","styleObject","menuButtonSlice","toggleMenuButtonState","selectMenuButtonState","menu","Icon","dispatch","useDispatch","toggleThemeMode","React","createElement","FaMoon","onClick","size","FaSun","DisplayToggle","className","subredditDataSlice","setSubredditData","action","payload","selectSubredditData","subredditData","searchResultsSlice","setSearchResults","selectSearchResults","searchResults","Searchbar","_useState","useState","_useState2","_slicedToArray","input","setInput","_useState3","_useState4","isFocused","setIsFocused","focusStyles","boxShadow","concat","borderColor","outline","posts","onSubmit","event","preventDefault","lowercasedInput","toLowerCase","matchedPostIds","filter","post","postTitle","includes","postText","map","postId","type","onChange","target","placeholder","style","onFocus","onBlur","MenuButton","buttonColor","menuButtonState","menuButtonClass","HiMenu","sortSlice","setSortOrder","selectSort","sort","Sort","accentColor","sortMethod","changeSortMethod","method","FaArrowCircleDown","FaArrowCircleUp","subredditButtonSlice","toggleSubredditButtonState","selectSubredditButtonState","subredditButton","SubredditsButton","buttonStyle","buttonText","id","subredditSlice","setSubreddit","selectSubreddit","subreddit","SubredditList","currentSubreddit","changeSubreddit","subredditList","i","_objectSpread","textDecoration","fontWeight","key","arrestedButtonSlice","toggleArrestedButtonState","selectArrestedButtonState","arrestedButton","ArrestedButton","arrestedSlice","addArrestedUser","push","removeArrestedUser","user","removeAllArrestedUsers","_arrestedSlice$action","selectArrestedUsers","arrested","ArrestsList","arrestedUsers","emptyMessage","length","handleRemoveUser","Fragment","Header","menuBackground","subredditButtonState","arrestedButtonState","menuContainerClass","srListContainerClass","arrestedListContainerClass","useEffect","SortButtons","SubredditMenu","UserInfo","_ref","_post$userData","userData","pfp","username","imageUrl","shortUrl","split","src","alt","width","height","FaUserCircle","GalleryViewer","images","currentIndex","setCurrentIndex","currentImage","FaArrowAltCircleLeft","prevIndex","FaArrowAltCircleRight","StyledLink","styled","a","_templateObject","_taggedTemplateLiteral","props","themeColor","PostMedia","galleryData","mediaMetaData","media","postHint","isVideo","urlOverridden","url","decodedUrl","he","decode","decodedUrlOverridden","galleryImages","items","item","galleryImageUrl","media_id","s","u","renderYoutubeVideo","videoUrl","oembed","html","match","videoTitle","title","allowFullScreen","renderRedditVideo","reddit_video","fallback_url","renderImage","renderImageGallery","renderUrl","href","rel","renderUrlOverridden","PostTextContainer","div","linkColor","headingColor","textColor","PostText","decodedText","sanitisedHTML","DOMPurify","sanitize","postTextRef","useRef","host","window","location","origin","current","links","getElementsByTagName","startsWith","replace","dangerouslySetInnerHTML","__html","ref","CardContent","pollData","decodedTitle","options","option","text","renderPoll","PostInfo","created","comments","karma","timeStamp","Date","unit","seconds","now","minutes","Math","round","hours","days","floor","FaYinYang","FaRegClock","FaRegComment","ArrestAction","GiHandcuffs","Card","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","Posts","fetchSubreddits","_asyncToGenerator","_callee2","subredditName","response","data","postsWithUserData","_context2","fetch","json","all","children","_ref2","_callee","child","crosspost","userDataResponse","_context","author","num_comments","post_hint","selftext_html","is_video","poll_data","gallery_data","media_metadata","crossposts","crosspost_parent_list","url_overridden_by_dest","total_karma","icon_img","_x","apply","arguments","t0","console","scrollTo","filteredPosts","sortedSubredditData","_toConsumableArray","b","App","document","body","backgroundColor","pageContainer","querySelector","classList","add","remove","Sidebar","configureStore","reducer","themeReducer","sortReducer","subredditReducer","menuButtonReducer","subredditButtonReducer","subredditDataReducer","arrestedReducer","arrestedButtonReducer","searchResultsReducer","ReactDOM","createRoot","getElementById","render","StrictMode","Provider","store"],"mappings":"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","file":"static/js/main.32550dde.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const themeColors = {\n    light: {\n        background: '#ECEFF4',\n        primaryText: '#2E3440',\n        secondaryText: '#4C566A',\n        accent: '#D08770',\n        border: '#D8DEE9'\n    },\n    dark: {\n        background: '#1C1E26',\n        primaryText: '#ECEFF4',\n        secondaryText: '#88C0D0',\n        accent: '#BF616A',\n        border: '#4C566A'\n    }\n}\n\nconst themeSlice = createSlice({\n    name: 'theme',\n    initialState: { value: 'dark' },\n    reducers: {\n        toggleTheme: state => {\n            state.value = state.value === 'dark' ? 'light' : 'dark';\n        }\n    },\n});\n\nexport const { toggleTheme } = themeSlice.actions;\n\nexport const selectTheme = state => state.theme.value;\n\nexport default themeSlice.reducer;","// themeHooks.js\n\nimport { useSelector } from 'react-redux';\nimport { selectTheme, themeColors } from '../redux/themeSlice';\n\nexport const useThemeColors = () => {\n    const theme = useSelector(selectTheme);\n    return themeColors[theme];\n};\n\n\nexport const useThemeObject = (property, color) => {\n    const theme = useThemeColors();\n    let styleObject = {};\n    styleObject[property] = theme[color];\n    return styleObject;\n};\n\n","import { createSlice } from '@reduxjs/toolkit';\n\n\nconst menuButtonSlice = createSlice({\n    name: 'menuButton',\n    initialState: 'closed',\n    reducers: {\n        toggleMenuButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n    },\n});\n\nexport const { toggleMenuButtonState } = menuButtonSlice.actions;\n\nexport const selectMenuButtonState = state => state.menu;\n\nexport default menuButtonSlice.reducer;","// React module imports.\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n// Local imports.\nimport { toggleTheme, selectTheme } from '../../../redux/themeSlice';\n// Style imports.\nimport './DisplayToggle.css';\n\n\nconst Icon = () => {\n    const dispatch = useDispatch();\n    const theme = useSelector(selectTheme);\n\n    const toggleThemeMode = () => {\n        dispatch(toggleTheme());\n    };\n\n    return (\n        theme === 'dark' ?\n            <FaMoon color='#D9D9D9' onClick={toggleThemeMode} size={23} />\n            :\n            <FaSun color='#F2CA00' onClick={toggleThemeMode} size={23} />\n    );\n}\n\nconst DisplayToggle = () => {\n\n    return (\n        <div className='theme-icon'>\n            <Icon />\n        </div>\n    );\n}\n\nexport default DisplayToggle;\n","// subredditDataSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst subredditDataSlice = createSlice({\n  name: 'subredditData',\n  initialState: [],\n  reducers: {\n    setSubredditData: (state, action) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setSubredditData } = subredditDataSlice.actions;\n\nexport const selectSubredditData = state => state.subredditData;\n\nexport default subredditDataSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst searchResultsSlice = createSlice({\n  name: 'searchResults',\n  initialState: [],\n  reducers: {\n    setSearchResults: (state, action) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setSearchResults } = searchResultsSlice.actions;\n\nexport const selectSearchResults = state => state.searchResults;\n\nexport default searchResultsSlice.reducer;\n","// React module imports.\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeColors } from '../../../hooks/themeHooks';\nimport { selectSubredditData } from '../../../redux/subredditDataSlice';\nimport { setSearchResults } from '../../../redux/searchResultsSlice';\n// Style imports.\nimport './Searchbar.css';\n\n\nconst Searchbar = () => {\n\n    const dispatch = useDispatch();\n\n    // Store state for user input.\n    const [input, setInput] = useState('');\n\n    // Store state for reactive styling.\n    const [isFocused, setIsFocused] = useState(false);\n\n    // Get variables for theme colors & other styling. \n    const themeColors = useThemeColors();\n    const secondaryText = themeColors.secondaryText;\n\n    const focusStyles = isFocused ? {\n        boxShadow: `0 0 3px 0 ${secondaryText}`,\n        borderColor: secondaryText,\n        outline: 'none',\n      } : {};\n\n    // Get posts array from state.\n    const posts = useSelector(selectSubredditData);\n\n    // Search function handlers.\n    const handleInputChange = (event) => {\n        setInput(event.target.value);\n        if (event.target.value === '') {\n            dispatch(setSearchResults([]));\n        }\n    }\n\n    const handleSearch = (event) => {\n        event.preventDefault(); // prevent the page from refreshing\n        const lowercasedInput = input.toLowerCase();\n        const filteredPosts = posts.filter((post) => {\n            return (post.postTitle && post.postTitle.toLowerCase().includes(lowercasedInput)) || \n                   (post.postText && post.postText.toLowerCase().includes(lowercasedInput));\n        });\n        const matchedPostIds = filteredPosts.map((post) => (post.postId));\n        dispatch(setSearchResults(matchedPostIds));\n    }\n    \n\n    return (\n        <form onSubmit={handleSearch}>\n            <input\n                type=\"search\"\n                value={input}\n                onChange={handleInputChange}\n                placeholder='Search...'\n                style={focusStyles}\n                onFocus={() => setIsFocused(true)}\n                onBlur={() => setIsFocused(false)}\n            />\n            <button\n                type=\"submit\"\n            >Search</button>\n        </form>\n    );\n}\n\nexport default Searchbar;","// React module imports.\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { HiMenu } from \"react-icons/hi\";\n// Local imports.\nimport { useThemeColors, useThemeObject } from '../../../hooks/themeHooks';\nimport { selectMenuButtonState, toggleMenuButtonState } from \"../../../redux/menuButtonSlice\";\n// Style imports.\nimport \"./MenuButton.css\"\n\n\nconst MenuButton = () => {\n\n    // Get theme objects and variables\n    const themeColors = useThemeColors();\n    const buttonColor = useThemeObject(\"backgroundColor\", \"primaryText\");\n    const background = themeColors.background;\n\n    // Get and manage the current menu state\n    const menuButtonState = useSelector(selectMenuButtonState);\n\n    const dispatch = useDispatch();\n\n    const toggleMenuButton = () => {\n        dispatch(toggleMenuButtonState());\n    };\n\n    // Conditional className\n    const menuButtonClass = menuButtonState === 'open' ? 'menuIcon rotate' : 'menuIcon';\n\n    return (\n        <div className=\"menuButton-container\">\n            <HiMenu\n                className={menuButtonClass}\n                style={buttonColor}\n                color={background}\n                size=\"35\"\n                onClick={toggleMenuButton}\n            />\n        </div >\n    );\n};\n\nexport default MenuButton;","import { createSlice } from '@reduxjs/toolkit';\n\n\nconst sortSlice = createSlice({\n    name: 'sort',\n    initialState: 'descending',\n    reducers: {\n        setSortOrder: (state, action) => action.payload,\n    },\n});\n\nexport const { setSortOrder } = sortSlice.actions;\n\nexport const selectSort = state => state.sort;\n\nexport default sortSlice.reducer;","// React module imports.\nimport React from \"react\";\nimport { FaArrowCircleDown, FaArrowCircleUp } from \"react-icons/fa\";\nimport { useDispatch, useSelector } from 'react-redux';\n// Local imports.\nimport { useThemeColors } from \"../../hooks/themeHooks\";\nimport { setSortOrder, selectSort } from \"../../redux/sortSlice\";\n// Style imports.\nimport './SortButtons.css';\n\n\nconst Sort = () => {\n\n    // Get theme objects and variables\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    // Get and manage the current sort order\n    const sortMethod = useSelector(selectSort);\n\n    const dispatch = useDispatch();\n\n    const changeSortMethod = (method) => () => {\n        dispatch(setSortOrder(method));\n    };\n\n    return (\n        <div className=\"arrows\">\n            <FaArrowCircleDown\n                className={`down-arrow ${sortMethod === 'descending' ? 'selected' : ''}`}\n                size={40}\n                color={accentColor}\n                onClick={changeSortMethod('descending')}\n            />\n            <FaArrowCircleUp\n                className={`up-arrow ${sortMethod === 'ascending' ? 'selected' : ''}`}\n                size={40}\n                color={accentColor}\n                onClick={changeSortMethod('ascending')}\n            />\n        </div>\n    );\n};\n\n\nexport default Sort;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst subredditButtonSlice = createSlice({\n    name: 'subredditButton',\n    initialState: 'closed',  // assuming the button starts off in the 'off' state\n    reducers: {\n        toggleSubredditButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n    },\n});\n\nexport const { toggleSubredditButtonState } = subredditButtonSlice.actions;\n\nexport const selectSubredditButtonState = state => state.subredditButton;\n\nexport default subredditButtonSlice.reducer;\n","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject, useThemeColors } from \"../../hooks/themeHooks\";\nimport { toggleSubredditButtonState } from \"../../redux/subredditButtonSlice\";\n// Style imports.\nimport './SubredditsButton.css';\n\n\nconst SubredditsButton = () => {\n\n    // Get theme objects and variables\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const themeColors = useThemeColors();\n    const buttonText = themeColors.primaryText;\n\n    const dispatch = useDispatch();\n\n    const toggleSubredditButton = () => {\n        dispatch(toggleSubredditButtonState());\n    };\n\n    return (\n        <div className=\"subreddits-button-container\">\n            <button\n                id=\"subreddits-button\"\n                type=\"button\"\n                style={buttonStyle}\n                onClick={toggleSubredditButton}\n            >\n                <span id=\"subreddits-button-label\" style={{color: buttonText}}>Subreddits</span>\n            </ button>\n        </div>\n    );\n};\n\nexport default SubredditsButton;","import { createSlice } from '@reduxjs/toolkit';\n\nconst subredditSlice = createSlice({\n    name: 'subreddit',\n    initialState: 'r/radiohead',\n    reducers: {\n        setSubreddit: (state, action) => action.payload,\n    },\n});\n\nexport const { setSubreddit } = subredditSlice.actions;\n\nexport const selectSubreddit = state => state.subreddit;\n\nexport default subredditSlice.reducer;","// React module imports.\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\n// Local imports.\nimport subredditList from '../../assets/data/subreddits.json';\nimport { setSubreddit, selectSubreddit } from \"../../redux/subredditSlice\";\nimport { useThemeObject } from \"../../hooks/themeHooks\";\n// Style imports.\nimport './SubredditList.css';\n\nconst SubredditList = () => {\n\n    const secondaryText = useThemeObject(\"color\", \"secondaryText\");\n    const accentColor = useThemeObject(\"color\", \"accent\");\n\n    // Get and manage the current subreddit\n    const currentSubreddit = useSelector(selectSubreddit);\n\n    const dispatch = useDispatch();\n    const changeSubreddit = (subreddit) => () => {\n        dispatch(setSubreddit(subreddit));\n    };\n\n    return (\n        <div>\n            <ul id=\"sr-list\" style={secondaryText}>\n                {\n                    subredditList.map((subreddit, i) => {\n                        // Create a style object for the subreddit button\n                        const buttonStyle = currentSubreddit === subreddit\n                            ? { ...secondaryText, textDecoration: 'underline', fontWeight: 'bold', color: accentColor.color } // active style\n                            : secondaryText; // default style\n\n                        return (\n                            <li id=\"sr-name\" key={i}>\n                                <button\n                                    id=\"sr-button\"\n                                    type=\"button\"\n                                    style={buttonStyle}\n                                    onClick={changeSubreddit(subreddit)}\n                                >\n                                    {subreddit}\n                                </button>\n                            </li>\n                        );\n                    })\n                }\n            </ul>\n        </div>\n    );\n};\n\nexport default SubredditList;","import { createSlice } from '@reduxjs/toolkit';\n\nconst arrestedButtonSlice = createSlice({\n    name: 'arrestedButton',\n    initialState: 'closed',  // assuming the button starts off in the 'off' state\n    reducers: {\n        toggleArrestedButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n    },\n});\n\nexport const { toggleArrestedButtonState } = arrestedButtonSlice.actions;\n\nexport const selectArrestedButtonState = state => state.arrestedButton;\n\nexport default arrestedButtonSlice.reducer;\n","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject, useThemeColors } from \"../../hooks/themeHooks\";\nimport { toggleArrestedButtonState } from \"../../redux/arrestedButtonSlice\";\n// Style imports.\nimport './ArrestedButton.css';\n\n\nconst ArrestedButton = () => {\n\n    // Get theme objects and variables\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const themeColors = useThemeColors();\n    const buttonText = themeColors.primaryText;\n\n    const dispatch = useDispatch();\n\n    const toggleArrestedButton = () => {\n        dispatch(toggleArrestedButtonState());\n    };\n\n    return (\n        <div className=\"arrested-button-container\">\n            <button\n                id=\"arrested-button\"\n                type=\"button\"\n                style={buttonStyle}\n                onClick={toggleArrestedButton}\n            >\n                <span id=\"arrested-button-label\" style={{color: buttonText}}>Arrested</span>\n            </ button>\n        </div>\n    );\n};\n\nexport default ArrestedButton;","import { createSlice } from '@reduxjs/toolkit';\n\nconst arrestedSlice = createSlice({\n    name: 'arrested',\n    initialState: [],\n    reducers: {\n        addArrestedUser: (state, action) => {\n            // Add a specified user tp the array.\n            state.push(action.payload);\n        },\n        removeArrestedUser: (state, action) => {\n            // Return a new state array that doesn't include the user specified in the payload\n            return state.filter(user => user !== action.payload);\n        },\n        removeAllArrestedUsers: () => {\n            // Reset state to its initial value\n            return [];\n        },\n    },\n});\n\nexport const { addArrestedUser, removeArrestedUser, removeAllArrestedUsers } = arrestedSlice.actions;\n\nexport const selectArrestedUsers = state => state.arrested;\n\nexport default arrestedSlice.reducer;\n","// React module imports.\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// Local imports.\nimport { removeArrestedUser, selectArrestedUsers, removeAllArrestedUsers } from '../../redux/arrestedSlice';\nimport { useThemeObject } from '../../hooks/themeHooks';\n// Style imports.\nimport './ArrestsList.css';\n\nconst ArrestsList = () => {\n\n    const primaryText = useThemeObject(\"color\", \"primaryText\")\n    const secondaryText = useThemeObject(\"color\", \"secondaryText\");\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const buttonText = useThemeObject(\"color\", \"primaryText\");\n    const arrestedUsers = useSelector(selectArrestedUsers);\n    const emptyMessage = arrestedUsers.length === 0 ? \"No Users Currently Arrested\" : \"Tap Username to Release\";\n\n    // Use the useDispatch hook to get the dispatch function\n    const dispatch = useDispatch();\n\n\n    const handleRemoveUser = (user) => {\n        dispatch(removeArrestedUser(user));\n    }\n\n    const handleRemoveAllUsers = () => {\n        dispatch(removeAllArrestedUsers());\n    }\n\n    return (\n        <div className='arrests-list-container'>\n            <p className='empty-message' style={primaryText}>{emptyMessage}</p>\n            <ul id=\"arrests-list\" style={secondaryText}>\n                {\n                    arrestedUsers.map((user, i) => (\n                        <div key={i} className='arrested-user-container'>\n                            <li id=\"arrested-name\" onClick={() => handleRemoveUser(user)}>{user}</li>\n                        </div>\n                    ))\n                }\n            </ul>\n            {\n                arrestedUsers.length > 1 ?\n                    <button\n                        id=\"release-all\"\n                        type=\"button\"\n                        style={buttonStyle}\n                        onClick={handleRemoveAllUsers}\n                    >\n                        <span id=\"release-all-button-label\" style={buttonText}>Release All Users</span>\n                    </ button>\n                    : <></>}\n        </div>\n    );\n};\n\nexport default ArrestsList;\n","// React module imports.\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject } from '../../hooks/themeHooks';\nimport DisplayToggle from './DisplayToggle/DisplayToggle';\nimport Searchbar from './Searchbar/Searchbar';\nimport MenuButton from \"./MenuButton/MenuButton\";\nimport Sort from \"../../elements/SortButtons/SortButtons\";\nimport SubredditsButton from \"../../elements/SubredditsButton/SubredditsButton\";\nimport SubredditList from \"../../elements/SubredditList/SubredditList\";\nimport { selectMenuButtonState } from \"../../redux/menuButtonSlice\";\nimport { selectSubredditButtonState, toggleSubredditButtonState } from \"../../redux/subredditButtonSlice\";\nimport ArrestedButton from \"../../elements/ArrestedButton/ArrestedButton\";\nimport ArrestsList from \"../../elements/ArrestsList/ArrestsList\";\nimport { selectArrestedButtonState, toggleArrestedButtonState } from \"../../redux/arrestedButtonSlice\";\n// Style imports.\nimport './Header.css';\n\n\nconst Header = () => {\n\n    const background = useThemeObject(\"backgroundColor\", \"background\");\n    const accentColor = useThemeObject(\"color\", \"accent\");\n    const borderColor = useThemeObject(\"color\", \"secondaryText\");\n    const menuBackground = useThemeObject(\"backgroundColor\", \"background\");\n\n    // Get and manage the current menu, subreddit and arrested button states\n    const menuButtonState = useSelector(selectMenuButtonState);\n    const subredditButtonState = useSelector(selectSubredditButtonState);\n    const arrestedButtonState = useSelector(selectArrestedButtonState);\n\n    const dispatch = useDispatch();\n\n    // Toggle arrested button action dispatch\n    const toggleArrestedButton = () => {\n        dispatch(toggleArrestedButtonState());\n    };\n\n    // Toggle subreddit button action dispatch\n    const toggleSubredditButton = () => {\n        dispatch(toggleSubredditButtonState());\n    };\n\n    // Conditional className - Menu\n    let menuContainerClass = '';\n    if (menuButtonState === 'open') {\n        menuContainerClass = 'menu-container mobile open';\n    } else {\n        menuContainerClass = 'menu-container mobile closed';\n    }\n\n    // Conditional className - Subreddit List\n    let srListContainerClass = '';\n    if (subredditButtonState === 'open' && menuButtonState === 'open') {\n        srListContainerClass = 'sr-list-container mobile open';\n    } else {\n        srListContainerClass = 'sr-list-container mobile closed';\n    }\n\n    // Conditional className - Arrested List\n    let arrestedListContainerClass = '';\n    if (arrestedButtonState === 'open' && menuButtonState === 'open') {\n        arrestedListContainerClass = 'arrested-list-container mobile open';\n    } else {\n        arrestedListContainerClass = 'arrested-list-container mobile closed';\n    }\n\n    useEffect(() => {\n        if (subredditButtonState === \"open\" && arrestedButtonState === \"open\") {\n            toggleSubredditButton();\n        }\n    }, [arrestedButtonState]);\n\n    useEffect(() => {\n        if (subredditButtonState === \"open\" && arrestedButtonState === \"open\") {\n            toggleArrestedButton();\n        }\n    }, [subredditButtonState]);\n\n    return (\n        <div className=\"header-container\" style={background}>\n            <div className=\"header\" style={background}>\n                <h1 className=\"logo\">\n                    <span className=\"karma\" style={accentColor}>KARMA</span>\n                    <span className=\"police\" style={borderColor}>POLICE</span>\n                </h1>\n                <div className=\"rightSide desktop\">\n                    <DisplayToggle />\n                    <Searchbar />\n                </div>\n                <div className=\"menuButton mobile\">\n                    <MenuButton />\n                </div>\n            </div>\n            <div className={menuContainerClass}>\n                <div className=\"menu-block\" id=\"block-1\" style={menuBackground}>\n                    <DisplayToggle />\n                    <Searchbar />\n                </div>\n                <div className=\"menu-block\" id=\"block-2\" style={menuBackground}>\n                    <SubredditsButton />\n                    <ArrestedButton />\n                    <Sort />\n                </div>\n                <div className={srListContainerClass}>\n                    <div className=\"list-block\" id=\"block-3\" style={menuBackground}>\n                        <SubredditList />\n                    </div>\n                </div>\n                <div className={arrestedListContainerClass}>\n                    <div className=\"list-block\" id=\"block-4\" style={menuBackground}>\n                        <ArrestsList />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","// React module imports. \nimport React from \"react\";\n// Local imports.\nimport SortButtons from \"../../../elements/SortButtons/SortButtons\"\nimport { useThemeObject } from \"../../../hooks/themeHooks\";\n// Style imports. \nimport './Sort.css';\n\n\nconst Sort = () => {\n\n    // Get theme objects and variables\n    const background = useThemeObject(\"backgroundColor\", \"border\");\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n\n    return (\n        <div className=\"sort\" style={background}>\n            <p id=\"sort-label\" style={primaryText}>Sort by Karma</p>\n            <SortButtons />\n        </div>\n    );\n};\n\nexport default Sort;","// React module imports.\nimport React from \"react\";\n// Local imports.\nimport { useThemeObject } from \"../../hooks/themeHooks\";\nimport SubredditList from \"../../elements/SubredditList/SubredditList\";\nimport Sort from \"../Header/Sort/Sort\";\nimport ArrestsList from \"../../elements/ArrestsList/ArrestsList\";\n// Style imports.\nimport './Sidebar.css';\n\n\nconst SubredditMenu = () => {\n\n    // Get theme objects and variables\n    const background = useThemeObject(\"backgroundColor\", \"border\");\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n\n    return (\n        <div className=\"Sidebar\">\n            <div className=\"sidebar-sort\" style={background}>\n                <Sort />\n            </div>\n            <div className=\"sidebar-sr-list\" style={background}>\n                <p className=\"sidebar-sr-label\" style={primaryText}>Subreddit</p>\n                <SubredditList />\n            </div>\n            <div className=\"sidebar-arrests-list\" style={background}>\n            <p className=\"sidebar-arrests-label\" style={primaryText}>Arrested Users</p> \n                <ArrestsList />\n            </div>\n        </div>\n    );\n};\n\nexport default SubredditMenu;\n","// React module imports.\nimport React from \"react\";\nimport { FaUserCircle } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./UserInfo.css\";\n\n\nconst UserInfo = ({ post }) => {\n\n    const {\n        userData: {\n            pfp,\n            username\n        }\n    } = post;\n\n    // Get theme colors. \n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n\n    const imageUrl = pfp;\n    const shortUrl = imageUrl && imageUrl.split(\"?\")[0];\n    const imageSize = '40px';\n    const iconSize = \"40\";\n\n\n    return (\n        <div className=\"user\">\n            {imageUrl ? (\n                <img\n                    className=\"user-pfp\"\n                    src={shortUrl}\n                    alt=\"Post Author PfP\"\n                    width={imageSize}\n                    height={imageSize}>\n                </img>\n            ) : (\n                <FaUserCircle color={accentColor} size={iconSize} />\n            )}\n            <p className=\"username\">{username}</p>\n        </div>\n    );\n};\n\nexport default UserInfo;","// React module imports.\nimport React, { useState } from \"react\";\nimport { FaArrowAltCircleLeft, FaArrowAltCircleRight } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../../../hooks/themeHooks\";\n// Style imports. \nimport './GalleryViewer.css';\n\nconst GalleryViewer = ({ images }) => {\n\n    const iconSize = \"60\";\n\n    // Get theme variables.\n    const themeColors = useThemeColors();\n    const buttonColor = themeColors.accent;\n\n    // Create and manage gallery index state.\n    const [currentIndex, setCurrentIndex] = useState(0);\n\n    const handlePrevious = () => {\n        setCurrentIndex((prevIndex) => prevIndex - 1);\n    };\n\n    const handleNext = () => {\n        setCurrentIndex((prevIndex) => prevIndex + 1);\n    };\n\n    const currentImage = images[currentIndex];\n\n    return (\n        <div className=\"gallery-viewer\">\n            {currentIndex > 0 ? (\n                <FaArrowAltCircleLeft\n                    className=\"gallery-viewer-button\"\n                    size={iconSize}\n                    color={buttonColor}\n                    onClick={handlePrevious} />\n            ) : <></>}\n\n            <img src={currentImage} alt=\"Gallery img\" />\n\n            {currentIndex < images.length - 1 ? (\n                <FaArrowAltCircleRight\n                    className=\"gallery-viewer-button\"\n                    size={iconSize}\n                    color={buttonColor}\n                    onClick={handleNext} />\n            ) : <></>}\n        </div>\n    );\n};\n\nexport default GalleryViewer;\n","// React module imports. \nimport React from \"react\";\nimport he from 'he';\nimport styled from 'styled-components';\n// Local imports.\nimport GalleryViewer from \"./GalleryViewer/GalleryViewer\";\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\n// Style imports.\nimport './PostMedia.css';\n\n// Create a styled component that will apply the theme colors.\nconst StyledLink = styled.a`\n    color: ${props => props.themeColor};\n\n    &:link {\n    color: ${props => props.themeColor};\n    }\n\n    &:visited {\n    color: ${props => props.themeColor};\n    }`;\n\nconst PostMedia = ({ post }) => {\n\n    const {\n        galleryData,\n        mediaMetaData,\n        media,\n        postHint,\n        isVideo,\n        urlOverridden,\n        url,\n        postTitle\n    } = post;\n\n    // Decode urls.\n    const decodedUrl = he.decode(url);\n    const decodedUrlOverridden = he.decode(url);\n\n    // Get theme colors.\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n\n    // Extract decoded URLs from galleryData\n    let galleryImages = [];\n    if (galleryData) {\n        galleryImages = galleryData.items.map((item) => {\n            const galleryImageUrl = mediaMetaData && mediaMetaData[item.media_id].s.u;\n            // Remove escaped & character encodings from URL.\n            return galleryImageUrl && he.decode(galleryImageUrl);\n        });\n    }\n\n    const renderMedia = () => {\n        if (media && media.type === \"youtube.com\") {\n            return renderYoutubeVideo();\n        } else if (media && media.reddit_video) {\n            return renderRedditVideo();\n        } else if (postHint === \"image\" && !isVideo && !media) {\n            return renderImage();\n        } else if (galleryData) {\n            return renderImageGallery();\n        } else if (postHint === \"link\") {\n            return renderUrl();\n        } else if (urlOverridden) {\n            return renderUrlOverridden();\n        } else {\n            return;\n        }\n    }\n\n    const renderYoutubeVideo = () => {\n        const videoUrl = media.oembed.html.match(/src=[\"'](.*?)[\"']/)[1];\n        const videoTitle = he.decode(media.oembed.title);\n        return (\n            <div className=\"youtube-video-container\">\n                <iframe\n                    className=\"video\"\n                    title={videoTitle}\n                    src={videoUrl}\n                    allowFullScreen>\n                </iframe>\n            </div>\n        );\n    }\n\n    const renderRedditVideo = () => {\n        const decodedUrl = he.decode(media.reddit_video.fallback_url);\n        return (\n            <div className=\"reddit-video-container\">\n                <iframe\n                    className=\"video\"\n                    title={postTitle}\n                    width={media.reddit_video.width}\n                    height={media.reddit_video.height}\n                    src={decodedUrl}>\n                </iframe>\n            </div>\n        );\n    }\n\n    const renderImage = () => {\n        return (\n            <div className=\"image-container\">\n                <img className=\"post-image\" src={decodedUrl} alt=\"\" />\n            </div>\n        );\n    }\n\n    const renderImageGallery = () => {\n        return (\n            <div className=\"image-container\">\n                {galleryImages.length > 0 && <GalleryViewer images={galleryImages} />}\n            </div>\n        );\n    }\n\n    const renderUrl = () => {\n        return (\n            <div className=\"link-container\">\n                <StyledLink href={decodedUrl} target=\"_blank\" rel=\"noopener noreferrer\" themeColor={accentColor}>\n                    {decodedUrl}\n                </StyledLink>\n            </div>\n        )\n    }\n\n    const renderUrlOverridden = () => {\n        return (\n            <div className=\"link-container\">\n                <StyledLink href={decodedUrlOverridden} target=\"_blank\" rel=\"noopener noreferrer\" themeColor={accentColor}>\n                    {decodedUrlOverridden}\n                </StyledLink>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {renderMedia()}\n        </div>\n    );\n};\n\nexport default PostMedia;","// React module imports.\nimport React, { useEffect, useRef } from \"react\";\nimport styled from 'styled-components';\nimport he from 'he';\nimport DOMPurify from 'dompurify';\n// Local imports.\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\n// Style imports. \nimport './PostText.css';\n\n// Create styled component for post text. \n// Workaround for styling child html entities whilst using dangerouslySetInnerHtml\nconst PostTextContainer = styled.div`\n    a {\n        color: ${props => props.linkColor};\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n    }\n\n    h1, h2, h3, h4, h5, h6 {\n        padding-top: 20px;\n        color: ${props => props.headingColor};\n    }\n\n    p {\n        color: ${props => props.textColor};\n        margin-left: 0px;\n    }\n\n    table {\n        width: 40%;\n    }\n\n    th {\n        color: ${props => props.headingColor};\n    }\n\n    tr {\n        color: ${props => props.textColor};\n    }\n    `;\n\nconst PostText = ({ post }) => {\n\n    // Destuctured values from post prop.\n    const {\n        postText,\n    } = post;\n\n    // Vars for text rendering.\n    let decodedText = \"\";\n    let sanitisedHTML = \"\";\n\n    // Decode and sanitise html entities from post text.\n    decodedText = postText && he.decode(postText);\n    sanitisedHTML = DOMPurify.sanitize(decodedText);\n\n    // Create a reference to the post text container. \n    const postTextRef = useRef(null);\n    const host = window.location.origin;\n    const reddit = 'https://www.reddit.com/';\n\n    useEffect(() => {\n        if (postTextRef.current) {\n            const links = postTextRef.current.getElementsByTagName('a');\n            for (let i = 0; i < links.length; i++) {\n                if (links[i].href.startsWith(host)) {\n                    links[i].href = links[i].href.replace(host, reddit);\n                }\n                links[i].target = '_blank';\n                links[i].rel = 'noopener noreferrer';\n            }\n        }\n    }, [decodedText]);\n\n\n\n    // Get theme color variables. \n    const themeColors = useThemeColors();\n\n    const linkColor = themeColors.accent;\n    const textColor = themeColors.secondaryText;\n    const headingColor = themeColors.primaryText;\n\n    return (\n        <PostTextContainer\n            className=\"post-text\"\n            dangerouslySetInnerHTML={{ __html: sanitisedHTML }}\n            linkColor={linkColor}\n            textColor={textColor}\n            headingColor={headingColor}\n            ref={postTextRef}\n        />\n    );\n};\n\nexport default PostText;\n","// React module imports.\nimport React from \"react\";\nimport he from 'he';\n// Local imports.\nimport PostMedia from \"./PostMedia/PostMedia\";\nimport PostText from \"./PostText/PostText\";\nimport { useThemeObject } from \"../../../../hooks/themeHooks\";\n// Style imports. \nimport \"./CardContent.css\";\n\nconst CardContent = ({ post }) => {\n    // Destructured values from object.\n    const {\n        postTitle,\n        pollData,\n    } = post;\n\n    // Get style variables. \n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\n\n    // Decode html entities from post title. \n    const decodedTitle = postTitle && he.decode(postTitle);\n\n    const renderPoll = () => {\n        if (pollData) {\n            return (\n                <div className=\"poll-container\">\n                    <p>Reddit Poll - Not currently voteable, click \"View Poll\" to vote on Reddit.com</p>\n                    <ul>\n                        {pollData.options.map((option) => (\n                            <li key={option.id}>{option.text}</li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <div className=\"card-content\" style={borderColor}>\n            <p className=\"post-title\">{decodedTitle}</p>\n            <PostMedia\n                post={post}\n            />\n            { renderPoll() }\n            <PostText post={post} />\n        </div>\n    );\n};\n\nexport default CardContent;\n","// React module imports.\nimport React from \"react\";\nimport { FaYinYang, FaRegClock, FaRegComment } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./PostInfo.css\";\n\n\nconst PostInfo = ({ post }) => {\n\n    const {\n        created,\n        comments,\n        userData: { karma }\n    } = post;\n\n    // Get theme colors. \n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    const iconSize = 20;\n\n    // Calculate time data. \n    let timeStamp = new Date(created * 1000);\n    let currentTime = Date.now();\n    let unit = \"\";\n    let value = 0;\n    const seconds = (currentTime - timeStamp) / 1000;\n    const minutes = Math.round(seconds / 60);\n    const hours = Math.round(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    // Determine unit to be displayed.\n    if (days > 0) {\n        unit = \"Day\";\n        value = days;\n    } if (days === 0) {\n        unit = \"Hour\";\n        value = hours;\n    } if (hours === 0) {\n        unit = \"Minute\";\n        value = minutes;\n    } if (minutes === 0) {\n        unit = \"Second\";\n        value = seconds;\n    }\n\n    // Pluralise if necessary.\n    if (value > 1) {\n        unit += 's';\n    }\n\n    return (\n        <div className=\"post-info\">\n            <div className=\"karma-score\">\n                <FaYinYang color={accentColor} size={iconSize} />\n                <span>{karma}</span>\n            </div>\n            <div className=\"post-age\">\n                <FaRegClock color={accentColor} size={iconSize} />\n                <span>{value} {unit}</span>\n            </div>\n            <div className=\"post-comments\">\n                <FaRegComment color={accentColor} size={iconSize} />\n                <span>{comments}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default PostInfo;","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { GiHandcuffs } from \"react-icons/gi\";\n// Local imports.\nimport { addArrestedUser } from \"../../../../redux/arrestedSlice\";\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./ArrestAction.css\";\n\nconst ArrestAction = ({ post }) => {\n    const {\n        userData: { username }\n    } = post;\n\n    const dispatch = useDispatch();\n\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    const handleArrest = () => { \n        dispatch(addArrestedUser(username));\n    }\n\n    const iconSize = \"40\";\n    return (\n        <div className=\"arrest\" onClick={handleArrest}>\n            <GiHandcuffs className=\"cuffs\" color={accentColor} size={iconSize} /> <span>Arrest This Man/Girl</span>\n        </div>\n    );\n};\n\nexport default ArrestAction;\n","// React module imports.\nimport React from \"react\";\n// Local imports.\nimport { useThemeObject } from '../../../hooks/themeHooks';\nimport UserInfo from \"./UserInfo/UserInfo\";\nimport CardContent from \"./CardContent/CardContent\";\nimport PostInfo from \"./PostInfo/PostInfo\";\nimport ArrestAction from \"./ArrestAction/ArrestAction\";\n// Style imports.\nimport './Card.css';\n\n// Card.js\nconst Card = ({ post }) => {\n\n    // Inline style variables.\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\n\n    return (\n        <div className=\"card-container\" style={primaryText}>\n            <UserInfo post={post} />\n            <div className=\"card\" style={borderColor}>\n                <CardContent\n                    post={post}\n                />\n                <PostInfo\n                    post={post}\n                />\n            </div>\n            <ArrestAction post={post} />\n        </div>\n    );\n};\n\nexport default Card;","// React module imports.\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// Local imports. \nimport Card from './Card/Card';\nimport { setSubredditData, selectSubredditData } from \"../../redux/subredditDataSlice\";\nimport { selectSubreddit } from \"../../redux/subredditSlice\";\nimport { selectSort } from \"../../redux/sortSlice\";\nimport { selectArrestedUsers } from \"../../redux/arrestedSlice\";\nimport { selectSearchResults } from \"../../redux/searchResultsSlice\";\n// Style imports.\n\n\nconst Posts = () => {\n\n    // Get and manage current subreddit and subreddit data. \n    const dispatch = useDispatch();\n    const subredditData = useSelector(selectSubredditData);\n    const currentSubreddit = useSelector(selectSubreddit);\n    const arrestedUsers = useSelector(selectArrestedUsers);\n    const searchResults = useSelector(selectSearchResults);\n\n    const fetchSubreddits = async () => {\n        try {\n            const subredditName = currentSubreddit;\n            const response = await fetch(`https://www.reddit.com/${subredditName}.json`);\n            const data = await response.json();\n\n            // Fetch the user data for each post\n            const postsWithUserData = await Promise.all(\n                data.data.children.map(async child => {\n                    const post = {\n                        postId: child.data.id,\n                        postTitle: child.data.title,\n                        username: child.data.author,\n                        created: child.data.created,\n                        comments: child.data.num_comments,\n                        postHint: child.data.post_hint,\n                        url: child.data.url,\n                        postText: child.data.selftext_html,\n                        media: child.data.media,\n                        isVideo: child.data.is_video,\n                        pollData: child.data.poll_data,\n                        galleryData: child.data.gallery_data,\n                        mediaMetaData: child.data.media_metadata,\n                        crossposts: child.data.crosspost_parent_list,\n                        urlOverridden: child.data.url_overridden_by_dest\n                    };\n\n                    // Check if there is crosspost data\n                    if (child.data.crosspost_parent_list) {\n                        const crosspost = child.data.crosspost_parent_list[0];\n                        post.postTitle = crosspost.title;\n                        post.created = crosspost.created;\n                        post.comments = crosspost.num_comments;\n                        post.url = crosspost.url;\n                        post.postText = crosspost.selftext_html;\n                        post.media = crosspost.media;\n                        post.isVideo = crosspost.is_video;\n                        post.pollData = crosspost.poll_data;\n                        post.galleryData = crosspost.gallery_data;\n                        post.mediaMetaData = crosspost.media_metadata;\n                        post.urlOverridden = crosspost.url_overridden_by_dest;\n                    }\n\n                    // Fetch the user data\n                    const userDataResponse = await fetch(`https://www.reddit.com/user/${post.username}/about.json`);\n                    const userData = await userDataResponse.json();\n\n                    // Add the user data to the post, only keeping the fields we need\n                    post.userData = {\n                        username: userData.data.name,\n                        karma: userData.data.total_karma,\n                        pfp: userData.data.icon_img\n                    };\n\n                    return post;\n                })\n            );\n\n            // Update your app's state or Redux store with the fetched subreddits\n            dispatch(setSubredditData(postsWithUserData));\n        } catch (error) {\n            console.error(\"Error fetching subreddits:\", error);\n            // Handle error appropriately\n        }\n    };\n\n\n    // Call the fetchSubreddits function to trigger the API request and update Redux state\n    useEffect(() => {\n        fetchSubreddits();\n        window.scrollTo(0, 0); // Go to top of page. \n    }, [currentSubreddit]);\n\n    // Filter posts by checking if post author is in arrested users list\n    let filteredPosts = subredditData.filter(post => !arrestedUsers.includes(post.username));\n\n    // Check if there are search results and filter posts accordingly\n    if (searchResults.length > 0) {\n        filteredPosts = filteredPosts.filter(post => searchResults.includes(post.postId));\n    }\n\n    // Create a new, sorted array of posts based on sort state.\n    const sortOrder = useSelector(selectSort);\n    let sortedSubredditData = [];\n\n    if (sortOrder === \"descending\") {\n        sortedSubredditData = [...filteredPosts]\n            .sort((a, b) => b.userData.karma - a.userData.karma);\n    } else {\n        sortedSubredditData = [...filteredPosts]\n            .sort((a, b) => a.userData.karma - b.userData.karma);\n    }\n\n\n    return (\n        <div>\n            {sortedSubredditData.length > 0 ? (\n                sortedSubredditData\n                    .map((post, i) => (\n                        <Card\n                            post={post}\n                            key={i}\n                        />\n                    ))\n            ) : (\n                <p>Loading...</p>\n            )}\n        </div>\n    );\n};\nexport default Posts;","// React module imports.\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n// Local imports.\nimport { useThemeColors, useThemeObject } from '../../hooks/themeHooks';\nimport { selectTheme } from '../../redux/themeSlice';\nimport { selectMenuButtonState } from '../../redux/menuButtonSlice';\nimport Header from '../../components/Header/Header';\nimport Sidebar from '../../components/Sidebar/Sidebar';\nimport Posts from '../../components/Posts/Posts';\n// Style imports\nimport './App.css';\nimport '../../stylesheets/globalStyles.css';\n\n\nexport default function App() {\n\n  // Get & manage theme state and theme variables.\n  const theme = useSelector(selectTheme);\n  const themeColors = useThemeColors();\n\n  // Inline style object.\n  const background = useThemeObject(\"backgroundColor\", \"background\");\n\n  // Update the CSS class of the body when the theme changes.\n  useEffect(() => {\n    document.body.className = theme;\n  }, [theme]);\n\n  // Set body element to background colour from theme.\n  document.body.style.backgroundColor = themeColors.background;\n\n  // Blur the site when the menu is open. \n  const menuButtonState = useSelector(selectMenuButtonState);\n\n  useEffect(() => {\n    const pageContainer = document.querySelector('.main-content');\n\n    if (menuButtonState === 'open') {\n      pageContainer.classList.add('blur');\n    } else {\n      pageContainer.classList.remove('blur');\n    }\n  }, [menuButtonState]);\n\n\n  return (\n    <div className=\"page-container\" style={background}>\n      <div className=\"container-wrap\">\n        <div className=\"App\">\n          <Header />\n          <div className='main-content'>\n            <Posts />\n          </div>\n          <div className='sidebar-container desktop'>\n            <Sidebar />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport themeReducer from './themeSlice';\nimport sortReducer from './sortSlice';\nimport subredditReducer from './subredditSlice';\nimport menuButtonReducer from './menuButtonSlice';\nimport subredditButtonReducer from './subredditButtonSlice';\nimport subredditDataReducer from './subredditDataSlice';\nimport arrestedReducer from './arrestedSlice';\nimport arrestedButtonReducer from './arrestedButtonSlice';\nimport searchResultsReducer from './searchResultsSlice';\n\n\nexport default configureStore({\n  reducer: {\n    theme: themeReducer,\n    sort: sortReducer,\n    subreddit: subredditReducer,\n    menu: menuButtonReducer,\n    subredditButton: subredditButtonReducer,\n    subredditData: subredditDataReducer,\n    arrested: arrestedReducer,\n    arrestedButton: arrestedButtonReducer,\n    searchResults: searchResultsReducer\n  },\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './stylesheets/reset.css';\nimport './stylesheets/index.css';\nimport './stylesheets/globalStyles.css';\nimport App from './containers/App/App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}