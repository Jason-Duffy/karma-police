{"version":3,"sources":["redux/themeSlice.js","hooks/themeHooks.js","redux/menuButtonSlice.js","components/Header/DisplayToggle/DisplayToggle.js","components/Header/Searchbar/Searchbar.js","components/Header/MenuButton/MenuButton.js","redux/sortSlice.js","elements/SortButtons/SortButtons.js","redux/subredditButtonSlice.js","elements/SubredditsButton/SubredditsButton.js","redux/subredditSlice.js","elements/SubredditList/SubredditList.js","redux/arrestedButtonSlice.js","elements/ArrestedButton/ArrestedButton.js","redux/arrestedSlice.js","elements/ArrestsList/ArrestsList.js","components/Header/Header.js","components/Header/Sort/Sort.js","components/Sidebar/Sidebar.js","components/Posts/Card/UserInfo/UserInfo.js","components/Posts/Card/CardContent/PostMedia/GalleryViewer/GalleryViewer.js","components/Posts/Card/CardContent/PostMedia/PostMedia.js","components/Posts/Card/CardContent/PostText/PostText.js","components/Posts/Card/CardContent/CardContent.js","components/Posts/Card/PostInfo/PostInfo.js","components/Posts/Card/ArrestAction/ArrestAction.js","components/Posts/Card/Card.js","redux/subredditDataSlice.js","components/Posts/Posts.js","containers/App/App.js","redux/store.js","index.js"],"names":["themeColors","light","background","primaryText","secondaryText","accent","border","dark","themeSlice","createSlice","name","initialState","value","reducers","toggleTheme","state","actions","selectTheme","theme","useThemeColors","useSelector","useThemeObject","property","color","styleObject","menuButtonSlice","toggleMenuButtonState","selectMenuButtonState","menu","Icon","dispatch","useDispatch","toggleThemeMode","React","createElement","FaMoon","onClick","size","FaSun","DisplayToggle","className","Searchbar","_useState","useState","_useState2","_slicedToArray","isFocused","setIsFocused","focusStyles","boxShadow","concat","borderColor","outline","type","placeholder","style","onFocus","onBlur","MenuButton","buttonColor","menuButtonState","menuButtonClass","HiMenu","sortSlice","setSortOrder","action","payload","selectSort","sort","Sort","accentColor","sortMethod","changeSortMethod","method","FaArrowCircleDown","FaArrowCircleUp","subredditButtonSlice","toggleSubredditButtonState","selectSubredditButtonState","subredditButton","SubredditsButton","buttonStyle","buttonText","id","subredditSlice","setSubreddit","selectSubreddit","subreddit","SubredditList","currentSubreddit","changeSubreddit","subredditList","map","i","_objectSpread","textDecoration","fontWeight","key","arrestedButtonSlice","toggleArrestedButtonState","selectArrestedButtonState","arrestedButton","ArrestedButton","arrestedSlice","addArrestedUser","push","removeArrestedUser","filter","user","removeAllArrestedUsers","_arrestedSlice$action","selectArrestedUsers","arrested","ArrestsList","arrestedUsers","emptyMessage","length","handleRemoveUser","Fragment","Header","menuBackground","subredditButtonState","arrestedButtonState","menuContainerClass","srListContainerClass","arrestedListContainerClass","useEffect","SortButtons","SubredditMenu","UserInfo","_ref","_post$userData","post","userData","pfp","username","imageUrl","shortUrl","split","src","alt","width","height","FaUserCircle","GalleryViewer","images","currentIndex","setCurrentIndex","currentImage","FaArrowAltCircleLeft","prevIndex","FaArrowAltCircleRight","StyledLink","styled","a","_templateObject","_taggedTemplateLiteral","props","themeColor","PostMedia","galleryData","mediaMetaData","crossposts","media","postHint","isVideo","urlOverridden","url","postTitle","decodedUrl","he","decode","decodedUrlOverridden","galleryImages","items","item","galleryImageUrl","media_id","s","u","crosspostGalleryImages","gallery_data","media_metadata","renderYoutubeVideo","videoUrl","oembed","html","match","videoTitle","title","allowFullScreen","renderRedditVideo","reddit_video","fallback_url","renderCrosspostRedditVideo","renderImage","renderImageGallery","renderCrosspostImageGallery","renderUrl","href","target","rel","renderUrlOverridden","is_video","removed_by_category","console","log","PostTextContainer","div","linkColor","headingColor","textColor","PostText","postText","decodedText","sanitisedHTML","selftext_html","DOMPurify","sanitize","postTextRef","useRef","host","window","location","origin","current","links","getElementsByTagName","startsWith","replace","dangerouslySetInnerHTML","__html","ref","CardContent","pollData","decodedTitle","options","option","text","renderPoll","PostInfo","created","comments","karma","timeStamp","Date","unit","seconds","now","minutes","Math","round","hours","days","floor","FaYinYang","FaRegClock","FaRegComment","ArrestAction","GiHandcuffs","Card","subredditDataSlice","setSubredditData","selectSubredditData","subredditData","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","Posts","fetchSubreddits","_asyncToGenerator","_callee2","subredditName","response","data","postsWithUserData","_context2","fetch","json","all","children","_ref2","_callee","child","userDataResponse","_context","author","num_comments","post_hint","poll_data","crosspost_parent_list","url_overridden_by_dest","total_karma","icon_img","_x","apply","arguments","t0","scrollTo","filteredPosts","includes","sortedSubredditData","_toConsumableArray","b","App","document","body","backgroundColor","pageContainer","querySelector","classList","add","remove","Sidebar","configureStore","reducer","themeReducer","sortReducer","subredditReducer","menuButtonReducer","subredditButtonReducer","subredditDataReducer","arrestedReducer","arrestedButtonReducer","ReactDOM","createRoot","getElementById","render","StrictMode","Provider","store"],"mappings":"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","file":"static/js/main.af472140.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const themeColors = {\n    light: {\n        background: '#ECEFF4',\n        primaryText: '#2E3440',\n        secondaryText: '#4C566A',\n        accent: '#D08770',\n        border: '#D8DEE9'\n    },\n    dark: {\n        background: '#1C1E26',\n        primaryText: '#ECEFF4',\n        secondaryText: '#88C0D0',\n        accent: '#BF616A',\n        border: '#4C566A'\n    }\n}\n\nconst themeSlice = createSlice({\n    name: 'theme',\n    initialState: { value: 'dark' },\n    reducers: {\n        toggleTheme: state => {\n            state.value = state.value === 'dark' ? 'light' : 'dark';\n        }\n    },\n});\n\nexport const { toggleTheme } = themeSlice.actions;\n\nexport const selectTheme = state => state.theme.value;\n\nexport default themeSlice.reducer;","// themeHooks.js\n\nimport { useSelector } from 'react-redux';\nimport { selectTheme, themeColors } from '../redux/themeSlice';\n\nexport const useThemeColors = () => {\n    const theme = useSelector(selectTheme);\n    return themeColors[theme];\n};\n\n\nexport const useThemeObject = (property, color) => {\n    const theme = useThemeColors();\n    let styleObject = {};\n    styleObject[property] = theme[color];\n    return styleObject;\n};\n\n","import { createSlice } from '@reduxjs/toolkit';\n\n\nconst menuButtonSlice = createSlice({\n    name: 'menuButton',\n    initialState: 'closed',\n    reducers: {\n        toggleMenuButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n    },\n});\n\nexport const { toggleMenuButtonState } = menuButtonSlice.actions;\n\nexport const selectMenuButtonState = state => state.menu;\n\nexport default menuButtonSlice.reducer;","// React module imports.\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n// Local imports.\nimport { toggleTheme, selectTheme } from '../../../redux/themeSlice';\n// Style imports.\nimport './DisplayToggle.css';\n\n\nconst Icon = () => {\n    const dispatch = useDispatch();\n    const theme = useSelector(selectTheme);\n\n    const toggleThemeMode = () => {\n        dispatch(toggleTheme());\n    };\n\n    return (\n        theme === 'dark' ?\n            <FaMoon color='#D9D9D9' onClick={toggleThemeMode} size={23} />\n            :\n            <FaSun color='#F2CA00' onClick={toggleThemeMode} size={23} />\n    );\n}\n\nconst DisplayToggle = () => {\n\n    return (\n        <div className='theme-icon'>\n            <Icon />\n        </div>\n    );\n}\n\nexport default DisplayToggle;\n","// React module imports.\nimport React, { useState } from 'react';\n// Local imports.\nimport { useThemeColors } from '../../../hooks/themeHooks';\n// Style imports.\nimport './Searchbar.css';\n\n\nconst Searchbar = () => {\n\n    const [isFocused, setIsFocused] = useState(false);\n    const themeColors = useThemeColors();\n    const secondaryText = themeColors.secondaryText;\n\n    const focusStyles = isFocused ? {\n        boxShadow: `0 0 3px 0 ${secondaryText}`,\n        borderColor: secondaryText,\n        outline: 'none',\n      } : {};\n\n    return (\n        <form>\n            <input\n                type=\"search\"\n                placeholder='Search...'\n                style={focusStyles}\n                onFocus={() => setIsFocused(true)}\n                onBlur={() => setIsFocused(false)}\n            />\n            <button\n                type=\"submit\"\n            >Search</button>\n        </form>\n    );\n}\n\nexport default Searchbar;","// React module imports.\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { HiMenu } from \"react-icons/hi\";\n// Local imports.\nimport { useThemeColors, useThemeObject } from '../../../hooks/themeHooks';\nimport { selectMenuButtonState, toggleMenuButtonState } from \"../../../redux/menuButtonSlice\";\n// Style imports.\nimport \"./MenuButton.css\"\n\n\nconst MenuButton = () => {\n\n    // Get theme objects and variables\n    const themeColors = useThemeColors();\n    const buttonColor = useThemeObject(\"backgroundColor\", \"primaryText\");\n    const background = themeColors.background;\n\n    // Get and manage the current menu state\n    const menuButtonState = useSelector(selectMenuButtonState);\n\n    const dispatch = useDispatch();\n\n    const toggleMenuButton = () => {\n        dispatch(toggleMenuButtonState());\n    };\n\n    // Conditional className\n    const menuButtonClass = menuButtonState === 'open' ? 'menuIcon rotate' : 'menuIcon';\n\n    return (\n        <div className=\"menuButton-container\">\n            <HiMenu\n                className={menuButtonClass}\n                style={buttonColor}\n                color={background}\n                size=\"35\"\n                onClick={toggleMenuButton}\n            />\n        </div >\n    );\n};\n\nexport default MenuButton;","import { createSlice } from '@reduxjs/toolkit';\n\n\nconst sortSlice = createSlice({\n    name: 'sort',\n    initialState: 'descending',\n    reducers: {\n        setSortOrder: (state, action) => action.payload,\n    },\n});\n\nexport const { setSortOrder } = sortSlice.actions;\n\nexport const selectSort = state => state.sort;\n\nexport default sortSlice.reducer;","// React module imports.\nimport React from \"react\";\nimport { FaArrowCircleDown, FaArrowCircleUp } from \"react-icons/fa\";\nimport { useDispatch, useSelector } from 'react-redux';\n// Local imports.\nimport { useThemeColors } from \"../../hooks/themeHooks\";\nimport { setSortOrder, selectSort } from \"../../redux/sortSlice\";\n// Style imports.\nimport './SortButtons.css';\n\n\nconst Sort = () => {\n\n    // Get theme objects and variables\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    // Get and manage the current sort order\n    const sortMethod = useSelector(selectSort);\n\n    const dispatch = useDispatch();\n\n    const changeSortMethod = (method) => () => {\n        dispatch(setSortOrder(method));\n    };\n\n    return (\n        <div className=\"arrows\">\n            <FaArrowCircleDown\n                className={`down-arrow ${sortMethod === 'descending' ? 'selected' : ''}`}\n                size={40}\n                color={accentColor}\n                onClick={changeSortMethod('descending')}\n            />\n            <FaArrowCircleUp\n                className={`up-arrow ${sortMethod === 'ascending' ? 'selected' : ''}`}\n                size={40}\n                color={accentColor}\n                onClick={changeSortMethod('ascending')}\n            />\n        </div>\n    );\n};\n\n\nexport default Sort;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst subredditButtonSlice = createSlice({\n    name: 'subredditButton',\n    initialState: 'closed',  // assuming the button starts off in the 'off' state\n    reducers: {\n        toggleSubredditButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n    },\n});\n\nexport const { toggleSubredditButtonState } = subredditButtonSlice.actions;\n\nexport const selectSubredditButtonState = state => state.subredditButton;\n\nexport default subredditButtonSlice.reducer;\n","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject, useThemeColors } from \"../../hooks/themeHooks\";\nimport { toggleSubredditButtonState } from \"../../redux/subredditButtonSlice\";\n// Style imports.\nimport './SubredditsButton.css';\n\n\nconst SubredditsButton = () => {\n\n    // Get theme objects and variables\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const themeColors = useThemeColors();\n    const buttonText = themeColors.primaryText;\n\n    const dispatch = useDispatch();\n\n    const toggleSubredditButton = () => {\n        dispatch(toggleSubredditButtonState());\n    };\n\n    return (\n        <div className=\"subreddits-button-container\">\n            <button\n                id=\"subreddits-button\"\n                type=\"button\"\n                style={buttonStyle}\n                onClick={toggleSubredditButton}\n            >\n                <span id=\"subreddits-button-label\" style={{color: buttonText}}>Subreddits</span>\n            </ button>\n        </div>\n    );\n};\n\nexport default SubredditsButton;","import { createSlice } from '@reduxjs/toolkit';\n\nconst subredditSlice = createSlice({\n    name: 'subreddit',\n    initialState: 'r/radiohead',\n    reducers: {\n        setSubreddit: (state, action) => action.payload,\n    },\n});\n\nexport const { setSubreddit } = subredditSlice.actions;\n\nexport const selectSubreddit = state => state.subreddit;\n\nexport default subredditSlice.reducer;","// React module imports.\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\n// Local imports.\nimport subredditList from '../../assets/data/subreddits.json';\nimport { setSubreddit, selectSubreddit } from \"../../redux/subredditSlice\";\nimport { useThemeObject } from \"../../hooks/themeHooks\";\n// Style imports.\nimport './SubredditList.css';\n\nconst SubredditList = () => {\n\n    const secondaryText = useThemeObject(\"color\", \"secondaryText\");\n    const accentColor = useThemeObject(\"color\", \"accent\");\n\n    // Get and manage the current subreddit\n    const currentSubreddit = useSelector(selectSubreddit);\n\n    const dispatch = useDispatch();\n    const changeSubreddit = (subreddit) => () => {\n        dispatch(setSubreddit(subreddit));\n    };\n\n    return (\n        <div>\n            <ul id=\"sr-list\" style={secondaryText}>\n                {\n                    subredditList.map((subreddit, i) => {\n                        // Create a style object for the subreddit button\n                        const buttonStyle = currentSubreddit === subreddit\n                            ? { ...secondaryText, textDecoration: 'underline', fontWeight: 'bold', color: accentColor.color } // active style\n                            : secondaryText; // default style\n\n                        return (\n                            <li id=\"sr-name\" key={i}>\n                                <button\n                                    id=\"sr-button\"\n                                    type=\"button\"\n                                    style={buttonStyle}\n                                    onClick={changeSubreddit(subreddit)}\n                                >\n                                    {subreddit}\n                                </button>\n                            </li>\n                        );\n                    })\n                }\n            </ul>\n        </div>\n    );\n};\n\nexport default SubredditList;","import { createSlice } from '@reduxjs/toolkit';\n\nconst arrestedButtonSlice = createSlice({\n    name: 'arrestedButton',\n    initialState: 'closed',  // assuming the button starts off in the 'off' state\n    reducers: {\n        toggleArrestedButtonState: (state) => state === 'closed' ? 'open' : 'closed',\n    },\n});\n\nexport const { toggleArrestedButtonState } = arrestedButtonSlice.actions;\n\nexport const selectArrestedButtonState = state => state.arrestedButton;\n\nexport default arrestedButtonSlice.reducer;\n","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject, useThemeColors } from \"../../hooks/themeHooks\";\nimport { toggleArrestedButtonState } from \"../../redux/arrestedButtonSlice\";\n// Style imports.\nimport './ArrestedButton.css';\n\n\nconst ArrestedButton = () => {\n\n    // Get theme objects and variables\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const themeColors = useThemeColors();\n    const buttonText = themeColors.primaryText;\n\n    const dispatch = useDispatch();\n\n    const toggleArrestedButton = () => {\n        dispatch(toggleArrestedButtonState());\n    };\n\n    return (\n        <div className=\"arrested-button-container\">\n            <button\n                id=\"arrested-button\"\n                type=\"button\"\n                style={buttonStyle}\n                onClick={toggleArrestedButton}\n            >\n                <span id=\"arrested-button-label\" style={{color: buttonText}}>Arrested</span>\n            </ button>\n        </div>\n    );\n};\n\nexport default ArrestedButton;","import { createSlice } from '@reduxjs/toolkit';\n\nconst arrestedSlice = createSlice({\n    name: 'arrested',\n    initialState: [],\n    reducers: {\n        addArrestedUser: (state, action) => {\n            // Add a specified user tp the array.\n            state.push(action.payload);\n        },\n        removeArrestedUser: (state, action) => {\n            // Return a new state array that doesn't include the user specified in the payload\n            return state.filter(user => user !== action.payload);\n        },\n        removeAllArrestedUsers: () => {\n            // Reset state to its initial value\n            return [];\n        },\n    },\n});\n\nexport const { addArrestedUser, removeArrestedUser, removeAllArrestedUsers } = arrestedSlice.actions;\n\nexport const selectArrestedUsers = state => state.arrested;\n\nexport default arrestedSlice.reducer;\n","// React module imports.\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// Local imports.\nimport { removeArrestedUser, selectArrestedUsers, removeAllArrestedUsers } from '../../redux/arrestedSlice';\nimport { useThemeObject } from '../../hooks/themeHooks';\n// Style imports.\nimport './ArrestsList.css';\n\nconst ArrestsList = () => {\n\n    const primaryText = useThemeObject(\"color\", \"primaryText\")\n    const secondaryText = useThemeObject(\"color\", \"secondaryText\");\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\n    const buttonText = useThemeObject(\"color\", \"primaryText\");\n    const arrestedUsers = useSelector(selectArrestedUsers);\n    const emptyMessage = arrestedUsers.length === 0 ? \"No Users Currently Arrested\" : \"Tap Username to Release\";\n\n    // Use the useDispatch hook to get the dispatch function\n    const dispatch = useDispatch();\n\n\n    const handleRemoveUser = (user) => {\n        dispatch(removeArrestedUser(user));\n    }\n\n    const handleRemoveAllUsers = () => {\n        dispatch(removeAllArrestedUsers());\n    }\n\n    return (\n        <div className='arrests-list-container'>\n            <p className='empty-message' style={primaryText}>{emptyMessage}</p>\n            <ul id=\"arrests-list\" style={secondaryText}>\n                {\n                    arrestedUsers.map((user, i) => (\n                        <div key={i} className='arrested-user-container'>\n                            <li id=\"arrested-name\" onClick={() => handleRemoveUser(user)}>{user}</li>\n                        </div>\n                    ))\n                }\n            </ul>\n            {\n                arrestedUsers.length > 1 ?\n                    <button\n                        id=\"release-all\"\n                        type=\"button\"\n                        style={buttonStyle}\n                        onClick={handleRemoveAllUsers}\n                    >\n                        <span id=\"release-all-button-label\" style={buttonText}>Release All Users</span>\n                    </ button>\n                    : <></>}\n        </div>\n    );\n};\n\nexport default ArrestsList;\n","// React module imports.\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\n// Local imports.\nimport { useThemeObject } from '../../hooks/themeHooks';\nimport DisplayToggle from './DisplayToggle/DisplayToggle';\nimport Searchbar from './Searchbar/Searchbar';\nimport MenuButton from \"./MenuButton/MenuButton\";\nimport Sort from \"../../elements/SortButtons/SortButtons\";\nimport SubredditsButton from \"../../elements/SubredditsButton/SubredditsButton\";\nimport SubredditList from \"../../elements/SubredditList/SubredditList\";\nimport { selectMenuButtonState } from \"../../redux/menuButtonSlice\";\nimport { selectSubredditButtonState, toggleSubredditButtonState } from \"../../redux/subredditButtonSlice\";\nimport ArrestedButton from \"../../elements/ArrestedButton/ArrestedButton\";\nimport ArrestsList from \"../../elements/ArrestsList/ArrestsList\";\nimport { selectArrestedButtonState, toggleArrestedButtonState } from \"../../redux/arrestedButtonSlice\";\n// Style imports.\nimport './Header.css';\n\n\nconst Header = () => {\n\n    const background = useThemeObject(\"backgroundColor\", \"background\");\n    const accentColor = useThemeObject(\"color\", \"accent\");\n    const borderColor = useThemeObject(\"color\", \"secondaryText\");\n    const menuBackground = useThemeObject(\"backgroundColor\", \"background\");\n\n    // Get and manage the current menu, subreddit and arrested button states\n    const menuButtonState = useSelector(selectMenuButtonState);\n    const subredditButtonState = useSelector(selectSubredditButtonState);\n    const arrestedButtonState = useSelector(selectArrestedButtonState);\n\n    const dispatch = useDispatch();\n\n    // Toggle arrested button action dispatch\n    const toggleArrestedButton = () => {\n        dispatch(toggleArrestedButtonState());\n    };\n\n    // Toggle subreddit button action dispatch\n    const toggleSubredditButton = () => {\n        dispatch(toggleSubredditButtonState());\n    };\n\n    // Conditional className - Menu\n    let menuContainerClass = '';\n    if (menuButtonState === 'open') {\n        menuContainerClass = 'menu-container mobile open';\n    } else {\n        menuContainerClass = 'menu-container mobile closed';\n    }\n\n    // Conditional className - Subreddit List\n    let srListContainerClass = '';\n    if (subredditButtonState === 'open' && menuButtonState === 'open') {\n        srListContainerClass = 'sr-list-container mobile open';\n    } else {\n        srListContainerClass = 'sr-list-container mobile closed';\n    }\n\n    // Conditional className - Arrested List\n    let arrestedListContainerClass = '';\n    if (arrestedButtonState === 'open' && menuButtonState === 'open') {\n        arrestedListContainerClass = 'arrested-list-container mobile open';\n    } else {\n        arrestedListContainerClass = 'arrested-list-container mobile closed';\n    }\n\n    useEffect(() => {\n        if (subredditButtonState === \"open\" && arrestedButtonState === \"open\") {\n            toggleSubredditButton();\n        }\n    }, [arrestedButtonState]);\n\n    useEffect(() => {\n        if (subredditButtonState === \"open\" && arrestedButtonState === \"open\") {\n            toggleArrestedButton();\n        }\n    }, [subredditButtonState]);\n\n    return (\n        <div className=\"header-container\" style={background}>\n            <div className=\"header\" style={background}>\n                <h1 className=\"logo\">\n                    <span className=\"karma\" style={accentColor}>KARMA</span>\n                    <span className=\"police\" style={borderColor}>POLICE</span>\n                </h1>\n                <div className=\"rightSide desktop\">\n                    <DisplayToggle />\n                    <Searchbar />\n                </div>\n                <div className=\"menuButton mobile\">\n                    <MenuButton />\n                </div>\n            </div>\n            <div className={menuContainerClass}>\n                <div className=\"menu-block\" id=\"block-1\" style={menuBackground}>\n                    <DisplayToggle />\n                    <Searchbar />\n                </div>\n                <div className=\"menu-block\" id=\"block-2\" style={menuBackground}>\n                    <SubredditsButton />\n                    <ArrestedButton />\n                    <Sort />\n                </div>\n                <div className={srListContainerClass}>\n                    <div className=\"list-block\" id=\"block-3\" style={menuBackground}>\n                        <SubredditList />\n                    </div>\n                </div>\n                <div className={arrestedListContainerClass}>\n                    <div className=\"list-block\" id=\"block-4\" style={menuBackground}>\n                        <ArrestsList />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","// React module imports. \nimport React from \"react\";\n// Local imports.\nimport SortButtons from \"../../../elements/SortButtons/SortButtons\"\nimport { useThemeObject } from \"../../../hooks/themeHooks\";\n// Style imports. \nimport './Sort.css';\n\n\nconst Sort = () => {\n\n    // Get theme objects and variables\n    const background = useThemeObject(\"backgroundColor\", \"border\");\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n\n    return (\n        <div className=\"sort\" style={background}>\n            <p id=\"sort-label\" style={primaryText}>Sort by Karma</p>\n            <SortButtons />\n        </div>\n    );\n};\n\nexport default Sort;","// React module imports.\nimport React from \"react\";\n// Local imports.\nimport { useThemeObject } from \"../../hooks/themeHooks\";\nimport SubredditList from \"../../elements/SubredditList/SubredditList\";\nimport Sort from \"../Header/Sort/Sort\";\nimport ArrestsList from \"../../elements/ArrestsList/ArrestsList\";\n// Style imports.\nimport './Sidebar.css';\n\n\nconst SubredditMenu = () => {\n\n    // Get theme objects and variables\n    const background = useThemeObject(\"backgroundColor\", \"border\");\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n\n    return (\n        <div className=\"Sidebar\">\n            <div className=\"sidebar-sort\" style={background}>\n                <Sort />\n            </div>\n            <div className=\"sidebar-sr-list\" style={background}>\n                <p className=\"sidebar-sr-label\" style={primaryText}>Subreddit</p>\n                <SubredditList />\n            </div>\n            <div className=\"sidebar-arrests-list\" style={background}>\n            <p className=\"sidebar-arrests-label\" style={primaryText}>Arrested Users</p> \n                <ArrestsList />\n            </div>\n        </div>\n    );\n};\n\nexport default SubredditMenu;\n","// React module imports.\nimport React from \"react\";\nimport { FaUserCircle } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./UserInfo.css\";\n\n\nconst UserInfo = ({ post }) => {\n\n    const {\n        userData: {\n            pfp,\n            username\n        }\n    } = post;\n\n    // Get theme colors. \n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n\n    const imageUrl = pfp;\n    const shortUrl = imageUrl && imageUrl.split(\"?\")[0];\n    const imageSize = '40px';\n    const iconSize = \"40\";\n\n\n    return (\n        <div className=\"user\">\n            {imageUrl ? (\n                <img\n                    className=\"user-pfp\"\n                    src={shortUrl}\n                    alt=\"Post Author PfP\"\n                    width={imageSize}\n                    height={imageSize}>\n                </img>\n            ) : (\n                <FaUserCircle color={accentColor} size={iconSize} />\n            )}\n            <p className=\"username\">{username}</p>\n        </div>\n    );\n};\n\nexport default UserInfo;","// React module imports.\nimport React, { useState } from \"react\";\nimport { FaArrowAltCircleLeft, FaArrowAltCircleRight } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../../../hooks/themeHooks\";\n// Style imports. \nimport './GalleryViewer.css';\n\nconst GalleryViewer = ({ images }) => {\n\n    const iconSize = \"60\";\n\n    // Get theme variables.\n    const themeColors = useThemeColors();\n    const buttonColor = themeColors.accent;\n\n    // Create and manage gallery index state.\n    const [currentIndex, setCurrentIndex] = useState(0);\n\n    const handlePrevious = () => {\n        setCurrentIndex((prevIndex) => prevIndex - 1);\n    };\n\n    const handleNext = () => {\n        setCurrentIndex((prevIndex) => prevIndex + 1);\n    };\n\n    const currentImage = images[currentIndex];\n\n    return (\n        <div className=\"gallery-viewer\">\n            {currentIndex > 0 ? (\n                <FaArrowAltCircleLeft\n                    className=\"gallery-viewer-button\"\n                    size={iconSize}\n                    color={buttonColor}\n                    onClick={handlePrevious} />\n            ) : <></>}\n\n            <img src={currentImage} alt=\"Gallery img\" />\n\n            {currentIndex < images.length - 1 ? (\n                <FaArrowAltCircleRight\n                    className=\"gallery-viewer-button\"\n                    size={iconSize}\n                    color={buttonColor}\n                    onClick={handleNext} />\n            ) : <></>}\n        </div>\n    );\n};\n\nexport default GalleryViewer;\n","// React module imports. \nimport React from \"react\";\nimport he from 'he';\nimport styled from 'styled-components';\n// Local imports.\nimport GalleryViewer from \"./GalleryViewer/GalleryViewer\";\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\n// Style imports.\nimport './PostMedia.css';\n\n// Create a styled component that will apply the theme colors.\nconst StyledLink = styled.a`\n    color: ${props => props.themeColor};\n\n    &:link {\n    color: ${props => props.themeColor};\n    }\n\n    &:visited {\n    color: ${props => props.themeColor};\n    }`;\n\nconst PostMedia = ({ post }) => {\n\n    const {\n        galleryData,\n        mediaMetaData,\n        crossposts,\n        media,\n        postHint,\n        isVideo,\n        urlOverridden,\n        url,\n        postTitle\n    } = post;\n\n    // Decode urls.\n    const decodedUrl = he.decode(url);\n    const decodedUrlOverridden = he.decode(url);\n\n    // Get theme colors.\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n\n    // Extract decoded URLs from galleryData\n    let galleryImages = [];\n    if (galleryData) {\n        galleryImages = galleryData.items.map((item) => {\n            const galleryImageUrl = mediaMetaData && mediaMetaData[item.media_id].s.u;\n            // Remove escaped & character encodings from URL.\n            return galleryImageUrl && he.decode(galleryImageUrl);\n        });\n    }\n\n    // Extract decoded URL's from crosspost galleryData\n    let crosspostGalleryImages = [];\n    if (crossposts && crossposts[0].gallery_data) {\n        crosspostGalleryImages = crossposts[0].gallery_data.items.map((item) => {\n            const galleryImageUrl = crossposts[0].media_metadata && crossposts[0].media_metadata[item.media_id].s.u;\n            // Remove escaped & character encodings from URL.\n            return galleryImageUrl && he.decode(galleryImageUrl);\n        });\n    }\n\n    const renderMedia = () => {\n        if (media && media.type === \"youtube.com\") {\n            return renderYoutubeVideo();\n        } else if (media && media.reddit_video) {\n            return renderRedditVideo();\n        } else if (crossposts) {\n            if (crossposts[0].media && crossposts[0].media.reddit_video) {\n                return renderCrosspostRedditVideo();\n            } else if (crossposts[0].gallery_data) {\n                return renderCrosspostImageGallery();\n            } else if (postHint === \"image\" && !crossposts[0].is_video && !crossposts[0].media) {\n                return renderImage();\n            } else if (crossposts[0].removed_by_category === \"deleted\") {\n                return <p className=\"error-message\">This post has been deleted.</p>\n            } else {\n                console.log(\"Crosspost Error - Media Type Not Recognised\");\n                console.log(post);\n                return;\n            }\n        } else if (postHint === \"image\" && !isVideo && !media) {\n            return renderImage();\n        } else if (galleryData) {\n            return renderImageGallery();\n        } else if (postHint === \"link\") {\n            return renderUrl();\n        } else if (urlOverridden) {\n            return renderUrlOverridden();\n        } else {\n            return <></>;\n        }\n    }\n\n    const renderYoutubeVideo = () => {\n        const videoUrl = media.oembed.html.match(/src=[\"'](.*?)[\"']/)[1];\n        const videoTitle = he.decode(media.oembed.title);\n        return (\n            <div className=\"youtube-video-container\">\n                <iframe\n                    className=\"video\"\n                    title={videoTitle}\n                    src={videoUrl}\n                    allowFullScreen>\n                </iframe>\n            </div>\n        );\n    }\n\n    const renderRedditVideo = () => {\n        const decodedUrl = he.decode(media.reddit_video.fallback_url);\n        return (\n            <div className=\"reddit-video-container\">\n                <iframe\n                    className=\"video\"\n                    title={postTitle}\n                    width={media.reddit_video.width}\n                    height={media.reddit_video.height}\n                    src={decodedUrl}>\n                </iframe>\n            </div>\n        );\n    }\n\n    const renderCrosspostRedditVideo = () => {\n        const decodedUrl = he.decode(crossposts[0].media.reddit_video.fallback_url);\n        return (\n            <div className=\"reddit-video-container\">\n                <iframe\n                    className=\"video\"\n                    title={postTitle}\n                    width={crossposts[0].media.reddit_video.width}\n                    height={crossposts[0].media.reddit_video.height}\n                    src={decodedUrl}>\n                </iframe>\n            </div>\n        );\n    }\n\n    const renderImage = () => {\n        return (\n            <div className=\"image-container\">\n                <img className=\"post-image\" src={decodedUrl} alt=\"\" />\n            </div>\n        );\n    }\n\n    const renderImageGallery = () => {\n        return (\n            <div className=\"image-container\">\n                {galleryImages.length > 0 && <GalleryViewer images={galleryImages} />}\n            </div>\n        );\n    }\n\n    const renderCrosspostImageGallery = () => {\n        return (\n            <div className=\"image-container\">\n                {crosspostGalleryImages.length > 0 && <GalleryViewer images={crosspostGalleryImages} />}\n            </div>\n        );\n    }\n\n    const renderUrl = () => {\n        return (\n            <div className=\"link-container\">\n                <StyledLink href={decodedUrl} target=\"_blank\" rel=\"noopener noreferrer\" themeColor={accentColor}>\n                    {decodedUrl}\n                </StyledLink>\n            </div>\n        )\n    }\n\n    const renderUrlOverridden = () => {\n        return (\n            <div className=\"link-container\">\n                <StyledLink href={decodedUrlOverridden} target=\"_blank\" rel=\"noopener noreferrer\" themeColor={accentColor}>\n                    {decodedUrlOverridden}\n                </StyledLink>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {renderMedia()}\n        </div>\n    );\n};\n\nexport default PostMedia;","// React module imports.\nimport React, { useEffect, useRef } from \"react\";\nimport styled from 'styled-components';\nimport he from 'he';\nimport DOMPurify from 'dompurify';\n// Local imports.\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\n// Style imports. \nimport './PostText.css';\n\n// Create styled component for post text. \n// Workaround for styling child html entities whilst using dangerouslySetInnerHtml\nconst PostTextContainer = styled.div`\n    a {\n        color: ${props => props.linkColor};\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n    }\n\n    h1, h2, h3, h4, h5, h6 {\n        padding-top: 20px;\n        color: ${props => props.headingColor};\n    }\n\n    p {\n        color: ${props => props.textColor};\n        margin-left: 0px;\n    }\n\n    table {\n        width: 40%;\n    }\n\n    th {\n        color: ${props => props.headingColor};\n    }\n\n    tr {\n        color: ${props => props.textColor};\n    }\n    `;\n\nconst PostText = ({ post }) => {\n\n    // Destuctured values from post prop.\n    const {\n        postText,\n        crossposts\n    } = post;\n\n    // Vars for text rendering.\n    let decodedText = \"\";\n    let sanitisedHTML = \"\";\n\n    if (crossposts) {\n        // Decode and sanitise html entities from crosspost text.\n        decodedText = crossposts[0].selftext_html && he.decode(crossposts[0].selftext_html);\n        sanitisedHTML = DOMPurify.sanitize(decodedText);\n    } else {\n        // Decode and sanitise html entities from post text.\n        decodedText = postText && he.decode(postText);\n        sanitisedHTML = DOMPurify.sanitize(decodedText);\n    }\n\n    // Create a reference to the post text container. \n    const postTextRef = useRef(null);\n    const host = window.location.origin;\n    const reddit = 'https://www.reddit.com/';\n\n    useEffect(() => {\n        if (postTextRef.current) {\n            const links = postTextRef.current.getElementsByTagName('a');\n            for (let i = 0; i < links.length; i++) {\n                if (links[i].href.startsWith(host)) {\n                    links[i].href = links[i].href.replace(host, reddit);\n                }\n                links[i].target = '_blank';\n                links[i].rel = 'noopener noreferrer';\n            }\n        }\n    }, [decodedText]);\n\n\n\n    // Get theme color variables. \n    const themeColors = useThemeColors();\n\n    const linkColor = themeColors.accent;\n    const textColor = themeColors.secondaryText;\n    const headingColor = themeColors.primaryText;\n\n    return (\n        <PostTextContainer\n            className=\"post-text\"\n            dangerouslySetInnerHTML={{ __html: sanitisedHTML }}\n            linkColor={linkColor}\n            textColor={textColor}\n            headingColor={headingColor}\n            ref={postTextRef}\n        />\n    );\n};\n\nexport default PostText;\n","// React module imports.\nimport React from \"react\";\nimport he from 'he';\n// Local imports.\nimport PostMedia from \"./PostMedia/PostMedia\";\nimport PostText from \"./PostText/PostText\";\nimport { useThemeObject } from \"../../../../hooks/themeHooks\";\n// Style imports. \nimport \"./CardContent.css\";\n\nconst CardContent = ({ post }) => {\n    // Destructured values from object.\n    const {\n        postTitle,\n        pollData,\n    } = post;\n\n    // Get style variables. \n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\n\n    // Decode html entities from post title. \n    const decodedTitle = postTitle && he.decode(postTitle);\n\n    const renderPoll = () => {\n        if (pollData) {\n            return (\n                <div className=\"poll-container\">\n                    <p>Reddit Poll - Not currently voteable, click \"View Poll\" to vote on Reddit.com</p>\n                    <ul>\n                        {pollData.options.map((option) => (\n                            <li key={option.id}>{option.text}</li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <div className=\"card-content\" style={borderColor}>\n            <p className=\"post-title\">{decodedTitle}</p>\n            <PostMedia\n                post={post}\n            />\n            { renderPoll() }\n            <PostText post={post} />\n        </div>\n    );\n};\n\nexport default CardContent;\n","// React module imports.\nimport React from \"react\";\nimport { FaYinYang, FaRegClock, FaRegComment } from \"react-icons/fa\";\n// Local imports.\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./PostInfo.css\";\n\n\nconst PostInfo = ({ post }) => {\n\n    const {\n        created,\n        comments,\n        userData: { karma }\n    } = post;\n\n    // Get theme colors. \n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    const iconSize = 20;\n\n    // Calculate time data. \n    let timeStamp = new Date(created * 1000);\n    let currentTime = Date.now();\n    let unit = \"\";\n    let value = 0;\n    const seconds = (currentTime - timeStamp) / 1000;\n    const minutes = Math.round(seconds / 60);\n    const hours = Math.round(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    // Determine unit to be displayed.\n    if (days > 0) {\n        unit = \"Day\";\n        value = days;\n    } if (days === 0) {\n        unit = \"Hour\";\n        value = hours;\n    } if (hours === 0) {\n        unit = \"Minute\";\n        value = minutes;\n    } if (minutes === 0) {\n        unit = \"Second\";\n        value = seconds;\n    }\n\n    // Pluralise if necessary.\n    if (value > 1) {\n        unit += 's';\n    }\n\n    return (\n        <div className=\"post-info\">\n            <div className=\"karma-score\">\n                <FaYinYang color={accentColor} size={iconSize} />\n                <span>{karma}</span>\n            </div>\n            <div className=\"post-age\">\n                <FaRegClock color={accentColor} size={iconSize} />\n                <span>{value} {unit}</span>\n            </div>\n            <div className=\"post-comments\">\n                <FaRegComment color={accentColor} size={iconSize} />\n                <span>{comments}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default PostInfo;","// React module imports.\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { GiHandcuffs } from \"react-icons/gi\";\n// Local imports.\nimport { addArrestedUser } from \"../../../../redux/arrestedSlice\";\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\n// Style imports.\nimport \"./ArrestAction.css\";\n\nconst ArrestAction = ({ post }) => {\n    const {\n        userData: { username }\n    } = post;\n\n    const dispatch = useDispatch();\n\n    const themeColors = useThemeColors();\n    const accentColor = themeColors.accent;\n\n    const handleArrest = () => { \n        dispatch(addArrestedUser(username));\n    }\n\n    const iconSize = \"40\";\n    return (\n        <div className=\"arrest\" onClick={handleArrest}>\n            <GiHandcuffs className=\"cuffs\" color={accentColor} size={iconSize} /> <span>Arrest This Man/Girl</span>\n        </div>\n    );\n};\n\nexport default ArrestAction;\n","// React module imports.\nimport React from \"react\";\n// Local imports.\nimport { useThemeObject } from '../../../hooks/themeHooks';\nimport UserInfo from \"./UserInfo/UserInfo\";\nimport CardContent from \"./CardContent/CardContent\";\nimport PostInfo from \"./PostInfo/PostInfo\";\nimport ArrestAction from \"./ArrestAction/ArrestAction\";\n// Style imports.\nimport './Card.css';\n\n// Card.js\nconst Card = ({ post }) => {\n\n    // Inline style variables.\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\n\n    return (\n        <div className=\"card-container\" style={primaryText}>\n            <UserInfo post={post} />\n            <div className=\"card\" style={borderColor}>\n                <CardContent\n                    post={post}\n                />\n                <PostInfo\n                    post={post}\n                />\n            </div>\n            <ArrestAction post={post} />\n        </div>\n    );\n};\n\nexport default Card;","// subredditDataSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst subredditDataSlice = createSlice({\n  name: 'subredditData',\n  initialState: [],\n  reducers: {\n    setSubredditData: (state, action) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setSubredditData } = subredditDataSlice.actions;\n\nexport const selectSubredditData = state => state.subredditData;\n\nexport default subredditDataSlice.reducer;\n","// React module imports.\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// Local imports. \nimport Card from './Card/Card';\nimport { setSubredditData, selectSubredditData } from \"../../redux/subredditDataSlice\";\nimport { selectSubreddit } from \"../../redux/subredditSlice\";\nimport { selectSort } from \"../../redux/sortSlice\";\nimport { selectArrestedUsers } from \"../../redux/arrestedSlice\";\n// Style imports.\n\n\nconst Posts = () => {\n\n    // Get and manage current subreddit and subreddit data. \n    const dispatch = useDispatch();\n    const subredditData = useSelector(selectSubredditData);\n    const currentSubreddit = useSelector(selectSubreddit);\n    const arrestedUsers = useSelector(selectArrestedUsers);\n\n    const fetchSubreddits = async () => {\n        try {\n            const subredditName = currentSubreddit;\n            const response = await fetch(`https://www.reddit.com/${subredditName}.json`);\n            const data = await response.json();\n\n            // Fetch the user data for each post\n            const postsWithUserData = await Promise.all(\n                data.data.children.map(async child => {\n                    const post = {\n                        postTitle: child.data.title,\n                        username: child.data.author,\n                        created: child.data.created,\n                        comments: child.data.num_comments,\n                        postHint: child.data.post_hint,\n                        url: child.data.url,\n                        postText: child.data.selftext_html,\n                        media: child.data.media,\n                        isVideo: child.data.is_video,\n                        pollData: child.data.poll_data,\n                        galleryData: child.data.gallery_data,\n                        mediaMetaData: child.data.media_metadata,\n                        crossposts: child.data.crosspost_parent_list,\n                        urlOverridden: child.data.url_overridden_by_dest\n                    };\n\n                    // Fetch the user data\n                    const userDataResponse = await fetch(`https://www.reddit.com/user/${post.username}/about.json`);\n                    const userData = await userDataResponse.json();\n\n                    // Add the user data to the post, only keeping the fields we need\n                    post.userData = {\n                        username: userData.data.name,\n                        karma: userData.data.total_karma,\n                        pfp: userData.data.icon_img\n                    };\n\n                    return post;\n                })\n            );\n\n            // Update your app's state or Redux store with the fetched subreddits\n            dispatch(setSubredditData(postsWithUserData));\n        } catch (error) {\n            console.error(\"Error fetching subreddits:\", error);\n            // Handle error appropriately\n        }\n    };\n\n\n    // Call the fetchSubreddits function to trigger the API request and update Redux state\n    useEffect(() => {\n        fetchSubreddits();\n        window.scrollTo(0, 0); // Go to top of page. \n    }, [currentSubreddit]);\n\n    // Filter posts by checking if post author is in arrested users list\n    const filteredPosts = subredditData.filter(post => !arrestedUsers.includes(post.username));\n\n    // Create a new, sorted array of posts based on sort state.\n    const sortOrder = useSelector(selectSort);\n    let sortedSubredditData = [];\n\n    if (sortOrder === \"descending\") {\n        sortedSubredditData = [...filteredPosts]\n            .sort((a, b) => b.userData.karma - a.userData.karma);\n    } else {\n        sortedSubredditData = [...filteredPosts]\n            .sort((a, b) => a.userData.karma - b.userData.karma);\n    }\n\n\n    return (\n        <div>\n            {sortedSubredditData.length > 0 ? (\n                sortedSubredditData\n                    .map((post, i) => (\n                        <Card\n                            post={post}\n                            key={i}\n                        />\n                    ))\n            ) : (\n                <p>Loading...</p>\n            )}\n        </div>\n    );\n};\nexport default Posts;","// React module imports.\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n// Local imports.\nimport { useThemeColors, useThemeObject } from '../../hooks/themeHooks';\nimport { selectTheme } from '../../redux/themeSlice';\nimport { selectMenuButtonState } from '../../redux/menuButtonSlice';\nimport Header from '../../components/Header/Header';\nimport Sidebar from '../../components/Sidebar/Sidebar';\nimport Posts from '../../components/Posts/Posts';\n// Style imports\nimport './App.css';\nimport '../../stylesheets/globalStyles.css';\n\n\nexport default function App() {\n\n  // Get & manage theme state and theme variables.\n  const theme = useSelector(selectTheme);\n  const themeColors = useThemeColors();\n\n  // Inline style object.\n  const background = useThemeObject(\"backgroundColor\", \"background\");\n\n  // Update the CSS class of the body when the theme changes.\n  useEffect(() => {\n    document.body.className = theme;\n  }, [theme]);\n\n  // Set body element to background colour from theme.\n  document.body.style.backgroundColor = themeColors.background;\n\n  // Blur the site when the menu is open. \n  const menuButtonState = useSelector(selectMenuButtonState);\n\n  useEffect(() => {\n    const pageContainer = document.querySelector('.main-content');\n\n    if (menuButtonState === 'open') {\n      pageContainer.classList.add('blur');\n    } else {\n      pageContainer.classList.remove('blur');\n    }\n  }, [menuButtonState]);\n\n\n  return (\n    <div className=\"page-container\" style={background}>\n      <div className=\"container-wrap\">\n        <div className=\"App\">\n          <Header />\n          <div className='main-content'>\n            <Posts />\n          </div>\n          <div className='sidebar-container desktop'>\n            <Sidebar />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport themeReducer from './themeSlice';\nimport sortReducer from './sortSlice';\nimport subredditReducer from './subredditSlice';\nimport menuButtonReducer from './menuButtonSlice';\nimport subredditButtonReducer from './subredditButtonSlice';\nimport subredditDataReducer from './subredditDataSlice';\nimport arrestedReducer from './arrestedSlice';\nimport arrestedButtonReducer from './arrestedButtonSlice';\n\n\nexport default configureStore({\n  reducer: {\n    theme: themeReducer,\n    sort: sortReducer,\n    subreddit: subredditReducer,\n    menu: menuButtonReducer,\n    subredditButton: subredditButtonReducer,\n    subredditData: subredditDataReducer,\n    arrested: arrestedReducer,\n    arrestedButton: arrestedButtonReducer\n  },\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './stylesheets/reset.css';\nimport './stylesheets/index.css';\nimport './stylesheets/globalStyles.css';\nimport App from './containers/App/App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}