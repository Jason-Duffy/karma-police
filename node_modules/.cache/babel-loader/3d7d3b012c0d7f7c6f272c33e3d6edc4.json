{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\Jason\\\\Documents\\\\GitHub\\\\karma-police\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _templateObject,\n  _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Documents\\\\GitHub\\\\karma-police\\\\src\\\\components\\\\Posts\\\\Card\\\\CardContent\\\\PostText\\\\PostText.js\";\n// React module imports.\nimport React, { useEffect, useRef } from \"react\";\nimport styled from 'styled-components';\nimport he from 'he';\nimport DOMPurify from 'dompurify';\n// Local imports.\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\n// Style imports. \nimport './PostText.css';\n\n// Create styled component for post text. \n// Workaround for styling child html entities whilst using dangerouslySetInnerHtml\nvar PostTextContainer = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    a {\\n        color: \", \";\\n        word-wrap: break-word;\\n        overflow-wrap: break-word;\\n    }\\n\\n    h1, h2, h3, h4, h5, h6 {\\n        padding-top: 20px;\\n        color: \", \";\\n    }\\n\\n    p {\\n        color: \", \";\\n        margin-left: 0px;\\n    }\\n\\n    table {\\n        width: 40%;\\n    }\\n\\n    th {\\n        color: \", \";\\n    }\\n\\n    tr {\\n        color: \", \";\\n    }\\n    \"])), function (props) {\n  return props.linkColor;\n}, function (props) {\n  return props.headingColor;\n}, function (props) {\n  return props.textColor;\n}, function (props) {\n  return props.headingColor;\n}, function (props) {\n  return props.textColor;\n});\nvar PostText = function PostText(_ref) {\n  var post = _ref.post;\n  // Destuctured values from post prop.\n  var postText = post.postText,\n    crossposts = post.crossposts; // Vars for text rendering.\n  var decodedText = \"\";\n  var sanitisedHTML = \"\";\n  if (crossposts) {\n    // Decode and sanitise html entities from crosspost text.\n    decodedText = crossposts[0].selftext_html && he.decode(crossposts[0].selftext_html);\n    sanitisedHTML = DOMPurify.sanitize(decodedText);\n  } else {\n    // Decode and sanitise html entities from post text.\n    decodedText = postText && he.decode(postText);\n    sanitisedHTML = DOMPurify.sanitize(decodedText);\n  }\n\n  // Create a reference to the post text container. \n  var postTextRef = useRef(null);\n  var host = window.location.origin;\n  var reddit = 'https://www.reddit.com/';\n  useEffect(function () {\n    if (postTextRef.current) {\n      var links = postTextRef.current.getElementsByTagName('a');\n      for (var i = 0; i < links.length; i++) {\n        if (links[i].href.startsWith(host)) {\n          links[i].href = links[i].href.replace(host, reddit);\n        }\n        links[i].target = '_blank';\n        links[i].rel = 'noopener noreferrer';\n      }\n    }\n  }, [decodedText]);\n\n  // Get theme color variables. \n  var themeColors = useThemeColors();\n  var linkColor = themeColors.accent;\n  var textColor = themeColors.secondaryText;\n  var headingColor = themeColors.primaryText;\n  return /*#__PURE__*/React.createElement(PostTextContainer, {\n    className: \"post-text\",\n    dangerouslySetInnerHTML: {\n      __html: sanitisedHTML\n    },\n    linkColor: linkColor,\n    textColor: textColor,\n    headingColor: headingColor,\n    ref: postTextRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  });\n};\nexport default PostText;","map":{"version":3,"names":["React","useEffect","useRef","styled","he","DOMPurify","useThemeColors","PostTextContainer","div","_templateObject","_taggedTemplateLiteral","props","linkColor","headingColor","textColor","PostText","_ref","post","postText","crossposts","decodedText","sanitisedHTML","selftext_html","decode","sanitize","postTextRef","host","window","location","origin","reddit","current","links","getElementsByTagName","i","length","href","startsWith","replace","target","rel","themeColors","accent","secondaryText","primaryText","createElement","className","dangerouslySetInnerHTML","__html","ref","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Jason/Documents/GitHub/karma-police/src/components/Posts/Card/CardContent/PostText/PostText.js"],"sourcesContent":["// React module imports.\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport styled from 'styled-components';\r\nimport he from 'he';\r\nimport DOMPurify from 'dompurify';\r\n// Local imports.\r\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\r\n// Style imports. \r\nimport './PostText.css';\r\n\r\n// Create styled component for post text. \r\n// Workaround for styling child html entities whilst using dangerouslySetInnerHtml\r\nconst PostTextContainer = styled.div`\r\n    a {\r\n        color: ${props => props.linkColor};\r\n        word-wrap: break-word;\r\n        overflow-wrap: break-word;\r\n    }\r\n\r\n    h1, h2, h3, h4, h5, h6 {\r\n        padding-top: 20px;\r\n        color: ${props => props.headingColor};\r\n    }\r\n\r\n    p {\r\n        color: ${props => props.textColor};\r\n        margin-left: 0px;\r\n    }\r\n\r\n    table {\r\n        width: 40%;\r\n    }\r\n\r\n    th {\r\n        color: ${props => props.headingColor};\r\n    }\r\n\r\n    tr {\r\n        color: ${props => props.textColor};\r\n    }\r\n    `;\r\n\r\nconst PostText = ({ post }) => {\r\n\r\n    // Destuctured values from post prop.\r\n    const {\r\n        postText,\r\n        crossposts\r\n    } = post;\r\n\r\n    // Vars for text rendering.\r\n    let decodedText = \"\";\r\n    let sanitisedHTML = \"\";\r\n\r\n    if (crossposts) {\r\n        // Decode and sanitise html entities from crosspost text.\r\n        decodedText = crossposts[0].selftext_html && he.decode(crossposts[0].selftext_html);\r\n        sanitisedHTML = DOMPurify.sanitize(decodedText);\r\n    } else {\r\n        // Decode and sanitise html entities from post text.\r\n        decodedText = postText && he.decode(postText);\r\n        sanitisedHTML = DOMPurify.sanitize(decodedText);\r\n    }\r\n\r\n    // Create a reference to the post text container. \r\n    const postTextRef = useRef(null);\r\n    const host = window.location.origin;\r\n    const reddit = 'https://www.reddit.com/';\r\n\r\n    useEffect(() => {\r\n        if (postTextRef.current) {\r\n            const links = postTextRef.current.getElementsByTagName('a');\r\n            for (let i = 0; i < links.length; i++) {\r\n                if (links[i].href.startsWith(host)) {\r\n                    links[i].href = links[i].href.replace(host, reddit);\r\n                }\r\n                links[i].target = '_blank';\r\n                links[i].rel = 'noopener noreferrer';\r\n            }\r\n        }\r\n    }, [decodedText]);\r\n\r\n\r\n\r\n    // Get theme color variables. \r\n    const themeColors = useThemeColors();\r\n\r\n    const linkColor = themeColors.accent;\r\n    const textColor = themeColors.secondaryText;\r\n    const headingColor = themeColors.primaryText;\r\n\r\n    return (\r\n        <PostTextContainer\r\n            className=\"post-text\"\r\n            dangerouslySetInnerHTML={{ __html: sanitisedHTML }}\r\n            linkColor={linkColor}\r\n            textColor={textColor}\r\n            headingColor={headingColor}\r\n            ref={postTextRef}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PostText;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}