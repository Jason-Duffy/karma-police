{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Jason\\\\Documents\\\\GitHub\\\\karma-police\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Jason\\\\Documents\\\\GitHub\\\\karma-police\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Documents\\\\GitHub\\\\karma-police\\\\src\\\\components\\\\Posts\\\\Posts.js\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// React module imports.\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// Local imports. \nimport Card from './Card/Card';\nimport { setSubredditData, selectSubredditData } from \"../../redux/subredditDataSlice\";\nimport { selectSubreddit } from \"../../redux/subredditSlice\";\nimport { selectSort } from \"../../redux/sortSlice\";\nimport { selectArrestedUsers } from \"../../redux/arrestedSlice\";\n// Style imports.\n\nvar Posts = function Posts() {\n  // Get and manage current subreddit and subreddit data. \n  var dispatch = useDispatch();\n  var subredditData = useSelector(selectSubredditData);\n  var currentSubreddit = useSelector(selectSubreddit);\n  var arrestedUsers = useSelector(selectArrestedUsers);\n  var fetchSubreddits = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var subredditName, response, data, postsWithUserData;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            subredditName = currentSubreddit;\n            _context2.next = 4;\n            return fetch(\"https://www.reddit.com/\".concat(subredditName, \".json\"));\n          case 4:\n            response = _context2.sent;\n            _context2.next = 7;\n            return response.json();\n          case 7:\n            data = _context2.sent;\n            _context2.next = 10;\n            return Promise.all(data.data.children.map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(child) {\n                var post, userDataResponse, userData;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      post = {\n                        postTitle: child.data.title,\n                        username: child.data.author,\n                        created: child.data.created,\n                        comments: child.data.num_comments,\n                        postHint: child.data.post_hint,\n                        url: child.data.url,\n                        postText: child.data.selftext_html,\n                        media: child.data.media,\n                        isVideo: child.data.is_video,\n                        pollData: child.data.poll_data,\n                        galleryData: child.data.gallery_data,\n                        mediaMetaData: child.data.media_metadata,\n                        crossposts: child.data.crosspost_parent_list,\n                        urlOverridden: child.data.url_overridden_by_dest\n                      }; // Fetch the user data\n                      _context.next = 3;\n                      return fetch(\"https://www.reddit.com/user/\".concat(post.username, \"/about.json\"));\n                    case 3:\n                      userDataResponse = _context.sent;\n                      _context.next = 6;\n                      return userDataResponse.json();\n                    case 6:\n                      userData = _context.sent;\n                      // Add the user data to the post, only keeping the fields we need\n                      post.userData = {\n                        username: userData.data.name,\n                        karma: userData.data.total_karma,\n                        pfp: userData.data.icon_img\n                      };\n                      return _context.abrupt(\"return\", post);\n                    case 9:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n          case 10:\n            postsWithUserData = _context2.sent;\n            // Update your app's state or Redux store with the fetched subreddits\n            dispatch(setSubredditData(postsWithUserData));\n            _context2.next = 17;\n            break;\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(\"Error fetching subreddits:\", _context2.t0);\n            // Handle error appropriately\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 14]]);\n    }));\n    return function fetchSubreddits() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // Call the fetchSubreddits function to trigger the API request and update Redux state\n  useEffect(function () {\n    fetchSubreddits();\n    window.scrollTo(0, 0); // Go to top of page. \n  }, [currentSubreddit]);\n\n  // Filter posts by checking if post author is in arrested users list\n  var filteredPosts = subredditData.filter(function (post) {\n    return !arrestedUsers.includes(post.username);\n  });\n\n  // Create a new, sorted array of posts based on sort state.\n  var sortOrder = useSelector(selectSort);\n  var sortedSubredditData = [];\n  if (sortOrder === \"descending\") {\n    sortedSubredditData = _toConsumableArray(filteredPosts).sort(function (a, b) {\n      return b.userData.karma - a.userData.karma;\n    });\n  } else {\n    sortedSubredditData = _toConsumableArray(filteredPosts).sort(function (a, b) {\n      return a.userData.karma - b.userData.karma;\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, sortedSubredditData.length > 0 ? sortedSubredditData.map(function (post, i) {\n    return /*#__PURE__*/React.createElement(Card, {\n      post: post,\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    });\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, \"Loading...\"));\n};\nexport default Posts;","map":{"version":3,"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","_catch","thrown","delegateYield","React","useEffect","useSelector","useDispatch","Card","setSubredditData","selectSubredditData","selectSubreddit","selectSort","selectArrestedUsers","Posts","dispatch","subredditData","currentSubreddit","arrestedUsers","fetchSubreddits","_ref","_asyncToGenerator","_callee2","subredditName","response","data","postsWithUserData","_callee2$","_context2","fetch","concat","json","all","children","map","_ref2","_callee","child","post","userDataResponse","userData","_callee$","_context","postTitle","title","username","author","created","comments","num_comments","postHint","post_hint","url","postText","selftext_html","media","isVideo","is_video","pollData","poll_data","galleryData","gallery_data","mediaMetaData","media_metadata","crossposts","crosspost_parent_list","urlOverridden","url_overridden_by_dest","karma","total_karma","pfp","icon_img","_x","apply","arguments","t0","console","window","scrollTo","filteredPosts","filter","includes","sortOrder","sortedSubredditData","_toConsumableArray","sort","a","b","createElement","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Jason/Documents/GitHub/karma-police/src/components/Posts/Posts.js"],"sourcesContent":["// React module imports.\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// Local imports. \r\nimport Card from './Card/Card';\r\nimport { setSubredditData, selectSubredditData } from \"../../redux/subredditDataSlice\";\r\nimport { selectSubreddit } from \"../../redux/subredditSlice\";\r\nimport { selectSort } from \"../../redux/sortSlice\";\r\nimport { selectArrestedUsers } from \"../../redux/arrestedSlice\";\r\n// Style imports.\r\n\r\n\r\nconst Posts = () => {\r\n\r\n    // Get and manage current subreddit and subreddit data. \r\n    const dispatch = useDispatch();\r\n    const subredditData = useSelector(selectSubredditData);\r\n    const currentSubreddit = useSelector(selectSubreddit);\r\n    const arrestedUsers = useSelector(selectArrestedUsers);\r\n\r\n    const fetchSubreddits = async () => {\r\n        try {\r\n            const subredditName = currentSubreddit;\r\n            const response = await fetch(`https://www.reddit.com/${subredditName}.json`);\r\n            const data = await response.json();\r\n\r\n            // Fetch the user data for each post\r\n            const postsWithUserData = await Promise.all(\r\n                data.data.children.map(async child => {\r\n                    const post = {\r\n                        postTitle: child.data.title,\r\n                        username: child.data.author,\r\n                        created: child.data.created,\r\n                        comments: child.data.num_comments,\r\n                        postHint: child.data.post_hint,\r\n                        url: child.data.url,\r\n                        postText: child.data.selftext_html,\r\n                        media: child.data.media,\r\n                        isVideo: child.data.is_video,\r\n                        pollData: child.data.poll_data,\r\n                        galleryData: child.data.gallery_data,\r\n                        mediaMetaData: child.data.media_metadata,\r\n                        crossposts: child.data.crosspost_parent_list,\r\n                        urlOverridden: child.data.url_overridden_by_dest\r\n                    };\r\n\r\n                    // Fetch the user data\r\n                    const userDataResponse = await fetch(`https://www.reddit.com/user/${post.username}/about.json`);\r\n                    const userData = await userDataResponse.json();\r\n\r\n                    // Add the user data to the post, only keeping the fields we need\r\n                    post.userData = {\r\n                        username: userData.data.name,\r\n                        karma: userData.data.total_karma,\r\n                        pfp: userData.data.icon_img\r\n                    };\r\n\r\n                    return post;\r\n                })\r\n            );\r\n\r\n            // Update your app's state or Redux store with the fetched subreddits\r\n            dispatch(setSubredditData(postsWithUserData));\r\n        } catch (error) {\r\n            console.error(\"Error fetching subreddits:\", error);\r\n            // Handle error appropriately\r\n        }\r\n    };\r\n\r\n\r\n    // Call the fetchSubreddits function to trigger the API request and update Redux state\r\n    useEffect(() => {\r\n        fetchSubreddits();\r\n        window.scrollTo(0, 0); // Go to top of page. \r\n    }, [currentSubreddit]);\r\n\r\n    // Filter posts by checking if post author is in arrested users list\r\n    const filteredPosts = subredditData.filter(post => !arrestedUsers.includes(post.username));\r\n\r\n    // Create a new, sorted array of posts based on sort state.\r\n    const sortOrder = useSelector(selectSort);\r\n    let sortedSubredditData = [];\r\n\r\n    if (sortOrder === \"descending\") {\r\n        sortedSubredditData = [...filteredPosts]\r\n            .sort((a, b) => b.userData.karma - a.userData.karma);\r\n    } else {\r\n        sortedSubredditData = [...filteredPosts]\r\n            .sort((a, b) => a.userData.karma - b.userData.karma);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {sortedSubredditData.length > 0 ? (\r\n                sortedSubredditData\r\n                    .map((post, i) => (\r\n                        <Card\r\n                            post={post}\r\n                            key={i}\r\n                        />\r\n                    ))\r\n            ) : (\r\n                <p>Loading...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default Posts;"],"mappings":"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"},"metadata":{},"sourceType":"module"}