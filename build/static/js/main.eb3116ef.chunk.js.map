{"version":3,"sources":["redux/themeSlice.js","hooks/themeHooks.js","redux/menuButtonSlice.js","components/Header/DisplayToggle/DisplayToggle.js","components/Header/Searchbar/Searchbar.js","components/Header/MenuButton/MenuButton.js","redux/sortSlice.js","elements/SortButtons/SortButtons.js","redux/subredditButtonSlice.js","elements/SubredditsButton/SubredditsButton.js","redux/subredditSlice.js","elements/SubredditList/SubredditList.js","redux/arrestedButtonSlice.js","elements/ArrestedButton/ArrestedButton.js","redux/arrestedSlice.js","elements/ArrestsList/ArrestsList.js","components/Header/Header.js","components/Header/Sort/Sort.js","components/Sidebar/Sidebar.js","components/Posts/Card/UserInfo/UserInfo.js","components/Posts/Card/CardContent/PostMedia/GalleryViewer/GalleryViewer.js","components/Posts/Card/CardContent/PostMedia/PostMedia.js","components/Posts/Card/CardContent/PostText/PostText.js","components/Posts/Card/CardContent/CardContent.js","components/Posts/Card/PostInfo/PostInfo.js","components/Posts/Card/ArrestAction/ArrestAction.js","components/Posts/Card/Card.js","redux/subredditDataSlice.js","components/Posts/Posts.js","containers/App/App.js","redux/store.js","index.js"],"names":["themeColors","light","background","primaryText","secondaryText","accent","border","dark","themeSlice","createSlice","name","initialState","value","reducers","toggleTheme","state","actions","selectTheme","theme","useThemeColors","useSelector","useThemeObject","property","color","styleObject","menuButtonSlice","toggleMenuButtonState","selectMenuButtonState","menu","Icon","dispatch","useDispatch","toggleThemeMode","React","createElement","FaMoon","onClick","size","FaSun","DisplayToggle","className","Searchbar","_useState","useState","_useState2","_slicedToArray","isFocused","setIsFocused","focusStyles","boxShadow","concat","borderColor","outline","type","placeholder","style","onFocus","onBlur","MenuButton","buttonColor","menuButtonState","menuButtonClass","HiMenu","sortSlice","setSortOrder","action","payload","selectSort","sort","Sort","accentColor","sortMethod","changeSortMethod","method","FaArrowCircleDown","FaArrowCircleUp","subredditButtonSlice","toggleSubredditButtonState","selectSubredditButtonState","subredditButton","SubredditsButton","buttonStyle","buttonText","id","subredditSlice","setSubreddit","selectSubreddit","subreddit","SubredditList","currentSubreddit","changeSubreddit","subredditList","map","i","_objectSpread","textDecoration","fontWeight","key","arrestedButtonSlice","toggleArrestedButtonState","selectArrestedButtonState","arrestedButton","ArrestedButton","arrestedSlice","addArrestedUser","push","removeArrestedUser","filter","user","removeAllArrestedUsers","_arrestedSlice$action","selectArrestedUsers","arrested","ArrestsList","arrestedUsers","emptyMessage","length","handleRemoveUser","Fragment","Header","menuBackground","subredditButtonState","arrestedButtonState","menuContainerClass","srListContainerClass","arrestedListContainerClass","useEffect","SortButtons","SubredditMenu","UserInfo","_ref","_post$userData","post","userData","pfp","username","imageUrl","shortUrl","split","src","alt","width","height","FaUserCircle","GalleryViewer","images","currentIndex","setCurrentIndex","currentImage","FaArrowAltCircleLeft","prevIndex","FaArrowAltCircleRight","StyledLink","styled","a","_templateObject","_taggedTemplateLiteral","props","themeColor","PostMedia","galleryData","mediaMetaData","crossposts","media","postHint","isVideo","urlOverridden","url","postTitle","decodedUrl","he","decode","decodedUrlOverridden","galleryImages","items","item","galleryImageUrl","media_id","s","u","crosspostGalleryImages","gallery_data","media_metadata","renderYoutubeVideo","videoUrl","oembed","html","match","videoTitle","title","allowFullScreen","renderRedditVideo","reddit_video","fallback_url","renderCrosspostRedditVideo","renderImage","renderImageGallery","renderCrosspostImageGallery","renderUrl","href","target","rel","renderUrlOverridden","is_video","removed_by_category","console","log","PostTextContainer","div","linkColor","headingColor","textColor","PostText","postText","decodedText","sanitisedHTML","selftext_html","DOMPurify","sanitize","postTextRef","useRef","host","window","location","origin","current","links","getElementsByTagName","startsWith","replace","dangerouslySetInnerHTML","__html","ref","CardContent","pollData","decodedTitle","options","option","text","renderPoll","PostInfo","created","comments","karma","timeStamp","Date","unit","seconds","now","minutes","Math","round","hours","days","floor","FaYinYang","FaRegClock","FaRegComment","ArrestAction","GiHandcuffs","Card","subredditDataSlice","setSubredditData","selectSubredditData","subredditData","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","Posts","fetchSubreddits","_asyncToGenerator","_callee2","subredditName","response","data","postsWithUserData","_context2","fetch","json","all","children","_ref2","_callee","child","userDataResponse","_context","author","num_comments","post_hint","poll_data","crosspost_parent_list","url_overridden_by_dest","total_karma","icon_img","_x","apply","arguments","t0","scrollTo","filteredPosts","includes","sortedSubredditData","_toConsumableArray","b","App","document","body","backgroundColor","pageContainer","querySelector","classList","add","remove","Sidebar","configureStore","reducer","themeReducer","sortReducer","subredditReducer","menuButtonReducer","subredditButtonReducer","subredditDataReducer","arrestedReducer","arrestedButtonReducer","ReactDOM","createRoot","getElementById","render","StrictMode","Provider","store"],"mappings":"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","file":"static/js/main.eb3116ef.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const themeColors = {\r\n    light: {\r\n        background: '#ECEFF4',\r\n        primaryText: '#2E3440',\r\n        secondaryText: '#4C566A',\r\n        accent: '#D08770',\r\n        border: '#D8DEE9'\r\n    },\r\n    dark: {\r\n        background: '#1C1E26',\r\n        primaryText: '#ECEFF4',\r\n        secondaryText: '#88C0D0',\r\n        accent: '#BF616A',\r\n        border: '#4C566A'\r\n    }\r\n}\r\n\r\nconst themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState: { value: 'dark' },\r\n    reducers: {\r\n        toggleTheme: state => {\r\n            state.value = state.value === 'dark' ? 'light' : 'dark';\r\n        }\r\n    },\r\n});\r\n\r\nexport const { toggleTheme } = themeSlice.actions;\r\n\r\nexport const selectTheme = state => state.theme.value;\r\n\r\nexport default themeSlice.reducer;","// themeHooks.js\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTheme, themeColors } from '../redux/themeSlice';\r\n\r\nexport const useThemeColors = () => {\r\n    const theme = useSelector(selectTheme);\r\n    return themeColors[theme];\r\n};\r\n\r\n\r\nexport const useThemeObject = (property, color) => {\r\n    const theme = useThemeColors();\r\n    let styleObject = {};\r\n    styleObject[property] = theme[color];\r\n    return styleObject;\r\n};\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nconst menuButtonSlice = createSlice({\r\n    name: 'menuButton',\r\n    initialState: 'closed',\r\n    reducers: {\r\n        toggleMenuButtonState: (state) => state === 'closed' ? 'open' : 'closed',\r\n    },\r\n});\r\n\r\nexport const { toggleMenuButtonState } = menuButtonSlice.actions;\r\n\r\nexport const selectMenuButtonState = state => state.menu;\r\n\r\nexport default menuButtonSlice.reducer;","// React module imports.\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FaMoon, FaSun } from \"react-icons/fa\";\r\n// Local imports.\r\nimport { toggleTheme, selectTheme } from '../../../redux/themeSlice';\r\n// Style imports.\r\nimport './DisplayToggle.css';\r\n\r\n\r\nconst Icon = () => {\r\n    const dispatch = useDispatch();\r\n    const theme = useSelector(selectTheme);\r\n\r\n    const toggleThemeMode = () => {\r\n        dispatch(toggleTheme());\r\n    };\r\n\r\n    return (\r\n        theme === 'dark' ?\r\n            <FaMoon color='#D9D9D9' onClick={toggleThemeMode} size={23} />\r\n            :\r\n            <FaSun color='#F2CA00' onClick={toggleThemeMode} size={23} />\r\n    );\r\n}\r\n\r\nconst DisplayToggle = () => {\r\n\r\n    return (\r\n        <div className='theme-icon'>\r\n            <Icon />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DisplayToggle;\r\n","// React module imports.\r\nimport React, { useState } from 'react';\r\n// Local imports.\r\nimport { useThemeColors } from '../../../hooks/themeHooks';\r\n// Style imports.\r\nimport './Searchbar.css';\r\n\r\n\r\nconst Searchbar = () => {\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const themeColors = useThemeColors();\r\n    const secondaryText = themeColors.secondaryText;\r\n\r\n    const focusStyles = isFocused ? {\r\n        boxShadow: `0 0 3px 0 ${secondaryText}`,\r\n        borderColor: secondaryText,\r\n        outline: 'none',\r\n      } : {};\r\n\r\n    return (\r\n        <form>\r\n            <input\r\n                type=\"search\"\r\n                placeholder='Search...'\r\n                style={focusStyles}\r\n                onFocus={() => setIsFocused(true)}\r\n                onBlur={() => setIsFocused(false)}\r\n            />\r\n            <button\r\n                type=\"submit\"\r\n            >Search</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Searchbar;","// React module imports.\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { HiMenu } from \"react-icons/hi\";\r\n// Local imports.\r\nimport { useThemeColors, useThemeObject } from '../../../hooks/themeHooks';\r\nimport { selectMenuButtonState, toggleMenuButtonState } from \"../../../redux/menuButtonSlice\";\r\n// Style imports.\r\nimport \"./MenuButton.css\"\r\n\r\n\r\nconst MenuButton = () => {\r\n\r\n    // Get theme objects and variables\r\n    const themeColors = useThemeColors();\r\n    const buttonColor = useThemeObject(\"backgroundColor\", \"primaryText\");\r\n    const background = themeColors.background;\r\n\r\n    // Get and manage the current menu state\r\n    const menuButtonState = useSelector(selectMenuButtonState);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const toggleMenuButton = () => {\r\n        dispatch(toggleMenuButtonState());\r\n    };\r\n\r\n    // Conditional className\r\n    const menuButtonClass = menuButtonState === 'open' ? 'menuIcon rotate' : 'menuIcon';\r\n\r\n    return (\r\n        <div className=\"menuButton-container\">\r\n            <HiMenu\r\n                className={menuButtonClass}\r\n                style={buttonColor}\r\n                color={background}\r\n                size=\"35\"\r\n                onClick={toggleMenuButton}\r\n            />\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default MenuButton;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nconst sortSlice = createSlice({\r\n    name: 'sort',\r\n    initialState: 'descending',\r\n    reducers: {\r\n        setSortOrder: (state, action) => action.payload,\r\n    },\r\n});\r\n\r\nexport const { setSortOrder } = sortSlice.actions;\r\n\r\nexport const selectSort = state => state.sort;\r\n\r\nexport default sortSlice.reducer;","// React module imports.\r\nimport React from \"react\";\r\nimport { FaArrowCircleDown, FaArrowCircleUp } from \"react-icons/fa\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// Local imports.\r\nimport { useThemeColors } from \"../../hooks/themeHooks\";\r\nimport { setSortOrder, selectSort } from \"../../redux/sortSlice\";\r\n// Style imports.\r\nimport './SortButtons.css';\r\n\r\n\r\nconst Sort = () => {\r\n\r\n    // Get theme objects and variables\r\n    const themeColors = useThemeColors();\r\n    const accentColor = themeColors.accent;\r\n\r\n    // Get and manage the current sort order\r\n    const sortMethod = useSelector(selectSort);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const changeSortMethod = (method) => () => {\r\n        dispatch(setSortOrder(method));\r\n    };\r\n\r\n    return (\r\n        <div className=\"arrows\">\r\n            <FaArrowCircleDown\r\n                className={`down-arrow ${sortMethod === 'descending' ? 'selected' : ''}`}\r\n                size={40}\r\n                color={accentColor}\r\n                onClick={changeSortMethod('descending')}\r\n            />\r\n            <FaArrowCircleUp\r\n                className={`up-arrow ${sortMethod === 'ascending' ? 'selected' : ''}`}\r\n                size={40}\r\n                color={accentColor}\r\n                onClick={changeSortMethod('ascending')}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Sort;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst subredditButtonSlice = createSlice({\r\n    name: 'subredditButton',\r\n    initialState: 'closed',  // assuming the button starts off in the 'off' state\r\n    reducers: {\r\n        toggleSubredditButtonState: (state) => state === 'closed' ? 'open' : 'closed',\r\n    },\r\n});\r\n\r\nexport const { toggleSubredditButtonState } = subredditButtonSlice.actions;\r\n\r\nexport const selectSubredditButtonState = state => state.subredditButton;\r\n\r\nexport default subredditButtonSlice.reducer;\r\n","// React module imports.\r\nimport React from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\n// Local imports.\r\nimport { useThemeObject, useThemeColors } from \"../../hooks/themeHooks\";\r\nimport { toggleSubredditButtonState } from \"../../redux/subredditButtonSlice\";\r\n// Style imports.\r\nimport './SubredditsButton.css';\r\n\r\n\r\nconst SubredditsButton = () => {\r\n\r\n    // Get theme objects and variables\r\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\r\n    const themeColors = useThemeColors();\r\n    const buttonText = themeColors.primaryText;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const toggleSubredditButton = () => {\r\n        dispatch(toggleSubredditButtonState());\r\n    };\r\n\r\n    return (\r\n        <div className=\"subreddits-button-container\">\r\n            <button\r\n                id=\"subreddits-button\"\r\n                type=\"button\"\r\n                style={buttonStyle}\r\n                onClick={toggleSubredditButton}\r\n            >\r\n                <span id=\"subreddits-button-label\" style={{color: buttonText}}>Subreddits</span>\r\n            </ button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SubredditsButton;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst subredditSlice = createSlice({\r\n    name: 'subreddit',\r\n    initialState: 'r/radiohead',\r\n    reducers: {\r\n        setSubreddit: (state, action) => action.payload,\r\n    },\r\n});\r\n\r\nexport const { setSubreddit } = subredditSlice.actions;\r\n\r\nexport const selectSubreddit = state => state.subreddit;\r\n\r\nexport default subredditSlice.reducer;","// React module imports.\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// Local imports.\r\nimport subredditList from '../../assets/data/subreddits.json';\r\nimport { setSubreddit, selectSubreddit } from \"../../redux/subredditSlice\";\r\nimport { useThemeObject } from \"../../hooks/themeHooks\";\r\n// Style imports.\r\nimport './SubredditList.css';\r\n\r\nconst SubredditList = () => {\r\n\r\n    const secondaryText = useThemeObject(\"color\", \"secondaryText\");\r\n    const accentColor = useThemeObject(\"color\", \"accent\");\r\n\r\n    // Get and manage the current subreddit\r\n    const currentSubreddit = useSelector(selectSubreddit);\r\n\r\n    const dispatch = useDispatch();\r\n    const changeSubreddit = (subreddit) => () => {\r\n        dispatch(setSubreddit(subreddit));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ul id=\"sr-list\" style={secondaryText}>\r\n                {\r\n                    subredditList.map((subreddit, i) => {\r\n                        // Create a style object for the subreddit button\r\n                        const buttonStyle = currentSubreddit === subreddit\r\n                            ? { ...secondaryText, textDecoration: 'underline', fontWeight: 'bold', color: accentColor.color } // active style\r\n                            : secondaryText; // default style\r\n\r\n                        return (\r\n                            <li id=\"sr-name\" key={i}>\r\n                                <button\r\n                                    id=\"sr-button\"\r\n                                    type=\"button\"\r\n                                    style={buttonStyle}\r\n                                    onClick={changeSubreddit(subreddit)}\r\n                                >\r\n                                    {subreddit}\r\n                                </button>\r\n                            </li>\r\n                        );\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SubredditList;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst arrestedButtonSlice = createSlice({\r\n    name: 'arrestedButton',\r\n    initialState: 'closed',  // assuming the button starts off in the 'off' state\r\n    reducers: {\r\n        toggleArrestedButtonState: (state) => state === 'closed' ? 'open' : 'closed',\r\n    },\r\n});\r\n\r\nexport const { toggleArrestedButtonState } = arrestedButtonSlice.actions;\r\n\r\nexport const selectArrestedButtonState = state => state.arrestedButton;\r\n\r\nexport default arrestedButtonSlice.reducer;\r\n","// React module imports.\r\nimport React from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\n// Local imports.\r\nimport { useThemeObject, useThemeColors } from \"../../hooks/themeHooks\";\r\nimport { toggleArrestedButtonState } from \"../../redux/arrestedButtonSlice\";\r\n// Style imports.\r\nimport './ArrestedButton.css';\r\n\r\n\r\nconst ArrestedButton = () => {\r\n\r\n    // Get theme objects and variables\r\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\r\n    const themeColors = useThemeColors();\r\n    const buttonText = themeColors.primaryText;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const toggleArrestedButton = () => {\r\n        dispatch(toggleArrestedButtonState());\r\n    };\r\n\r\n    return (\r\n        <div className=\"arrested-button-container\">\r\n            <button\r\n                id=\"arrested-button\"\r\n                type=\"button\"\r\n                style={buttonStyle}\r\n                onClick={toggleArrestedButton}\r\n            >\r\n                <span id=\"arrested-button-label\" style={{color: buttonText}}>Arrested</span>\r\n            </ button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArrestedButton;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst arrestedSlice = createSlice({\r\n    name: 'arrested',\r\n    initialState: [],\r\n    reducers: {\r\n        addArrestedUser: (state, action) => {\r\n            // Add a specified user tp the array.\r\n            state.push(action.payload);\r\n        },\r\n        removeArrestedUser: (state, action) => {\r\n            // Return a new state array that doesn't include the user specified in the payload\r\n            return state.filter(user => user !== action.payload);\r\n        },\r\n        removeAllArrestedUsers: () => {\r\n            // Reset state to its initial value\r\n            return [];\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addArrestedUser, removeArrestedUser, removeAllArrestedUsers } = arrestedSlice.actions;\r\n\r\nexport const selectArrestedUsers = state => state.arrested;\r\n\r\nexport default arrestedSlice.reducer;\r\n","// React module imports.\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// Local imports.\r\nimport { removeArrestedUser, selectArrestedUsers, removeAllArrestedUsers } from '../../redux/arrestedSlice';\r\nimport { useThemeObject } from '../../hooks/themeHooks';\r\n// Style imports.\r\nimport './ArrestsList.css';\r\n\r\nconst ArrestsList = () => {\r\n\r\n    const primaryText = useThemeObject(\"color\", \"primaryText\")\r\n    const secondaryText = useThemeObject(\"color\", \"secondaryText\");\r\n    const buttonStyle = useThemeObject(\"backgroundColor\", \"accent\");\r\n    const buttonText = useThemeObject(\"color\", \"primaryText\");\r\n    const arrestedUsers = useSelector(selectArrestedUsers);\r\n    const emptyMessage = arrestedUsers.length === 0 ? \"No Users Currently Arrested\" : \"Tap Username to Release\";\r\n\r\n    // Use the useDispatch hook to get the dispatch function\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const handleRemoveUser = (user) => {\r\n        dispatch(removeArrestedUser(user));\r\n    }\r\n\r\n    const handleRemoveAllUsers = () => {\r\n        dispatch(removeAllArrestedUsers());\r\n    }\r\n\r\n    return (\r\n        <div className='arrests-list-container'>\r\n            <p className='empty-message' style={primaryText}>{emptyMessage}</p>\r\n            <ul id=\"arrests-list\" style={secondaryText}>\r\n                {\r\n                    arrestedUsers.map((user, i) => (\r\n                        <div className='arrested-user-container'>\r\n                            <li id=\"arrested-name\" key={i} onClick={() => handleRemoveUser(user)}>{user}</li>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </ul>\r\n            {\r\n                arrestedUsers.length > 1 ?\r\n                    <button\r\n                        id=\"release-all\"\r\n                        type=\"button\"\r\n                        style={buttonStyle}\r\n                        onClick={handleRemoveAllUsers}\r\n                    >\r\n                        <span id=\"release-all-button-label\" style={buttonText}>Release All Users</span>\r\n                    </ button>\r\n                    : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArrestsList;\r\n","// React module imports.\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// Local imports.\r\nimport { useThemeObject } from '../../hooks/themeHooks';\r\nimport DisplayToggle from './DisplayToggle/DisplayToggle';\r\nimport Searchbar from './Searchbar/Searchbar';\r\nimport MenuButton from \"./MenuButton/MenuButton\";\r\nimport Sort from \"../../elements/SortButtons/SortButtons\";\r\nimport SubredditsButton from \"../../elements/SubredditsButton/SubredditsButton\";\r\nimport SubredditList from \"../../elements/SubredditList/SubredditList\";\r\nimport { selectMenuButtonState } from \"../../redux/menuButtonSlice\";\r\nimport { selectSubredditButtonState, toggleSubredditButtonState } from \"../../redux/subredditButtonSlice\";\r\nimport ArrestedButton from \"../../elements/ArrestedButton/ArrestedButton\";\r\nimport ArrestsList from \"../../elements/ArrestsList/ArrestsList\";\r\nimport { selectArrestedButtonState, toggleArrestedButtonState } from \"../../redux/arrestedButtonSlice\";\r\n// Style imports.\r\nimport './Header.css';\r\n\r\n\r\nconst Header = () => {\r\n\r\n    const background = useThemeObject(\"backgroundColor\", \"background\");\r\n    const accentColor = useThemeObject(\"color\", \"accent\");\r\n    const borderColor = useThemeObject(\"color\", \"secondaryText\");\r\n    const menuBackground = useThemeObject(\"backgroundColor\", \"background\");\r\n\r\n    // Get and manage the current menu, subreddit and arrested button states\r\n    const menuButtonState = useSelector(selectMenuButtonState);\r\n    const subredditButtonState = useSelector(selectSubredditButtonState);\r\n    const arrestedButtonState = useSelector(selectArrestedButtonState);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // Toggle arrested button action dispatch\r\n    const toggleArrestedButton = () => {\r\n        dispatch(toggleArrestedButtonState());\r\n    };\r\n\r\n    // Toggle subreddit button action dispatch\r\n    const toggleSubredditButton = () => {\r\n        dispatch(toggleSubredditButtonState());\r\n    };\r\n\r\n    // Conditional className - Menu\r\n    let menuContainerClass = '';\r\n    if (menuButtonState === 'open') {\r\n        menuContainerClass = 'menu-container mobile open';\r\n    } else {\r\n        menuContainerClass = 'menu-container mobile closed';\r\n    }\r\n\r\n    // Conditional className - Subreddit List\r\n    let srListContainerClass = '';\r\n    if (subredditButtonState === 'open' && menuButtonState === 'open') {\r\n        srListContainerClass = 'sr-list-container mobile open';\r\n    } else {\r\n        srListContainerClass = 'sr-list-container mobile closed';\r\n    }\r\n\r\n    // Conditional className - Arrested List\r\n    let arrestedListContainerClass = '';\r\n    if (arrestedButtonState === 'open' && menuButtonState === 'open') {\r\n        arrestedListContainerClass = 'arrested-list-container mobile open';\r\n    } else {\r\n        arrestedListContainerClass = 'arrested-list-container mobile closed';\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (subredditButtonState === \"open\" && arrestedButtonState === \"open\") {\r\n            toggleSubredditButton();\r\n        }\r\n    }, [arrestedButtonState]);\r\n\r\n    useEffect(() => {\r\n        if (subredditButtonState === \"open\" && arrestedButtonState === \"open\") {\r\n            toggleArrestedButton();\r\n        }\r\n    }, [subredditButtonState]);\r\n\r\n    return (\r\n        <div className=\"header-container\" style={background}>\r\n            <div className=\"header\" style={background}>\r\n                <h1 className=\"logo\">\r\n                    <span className=\"karma\" style={accentColor}>KARMA</span>\r\n                    <span className=\"police\" style={borderColor}>POLICE</span>\r\n                </h1>\r\n                <div className=\"rightSide desktop\">\r\n                    <DisplayToggle />\r\n                    <Searchbar />\r\n                </div>\r\n                <div className=\"menuButton mobile\">\r\n                    <MenuButton />\r\n                </div>\r\n            </div>\r\n            <div className={menuContainerClass}>\r\n                <div className=\"menu-block\" id=\"block-1\" style={menuBackground}>\r\n                    <DisplayToggle />\r\n                    <Searchbar />\r\n                </div>\r\n                <div className=\"menu-block\" id=\"block-2\" style={menuBackground}>\r\n                    <SubredditsButton />\r\n                    <ArrestedButton />\r\n                    <Sort />\r\n                </div>\r\n                <div className={srListContainerClass}>\r\n                    <div className=\"list-block\" id=\"block-3\" style={menuBackground}>\r\n                        <SubredditList />\r\n                    </div>\r\n                </div>\r\n                <div className={arrestedListContainerClass}>\r\n                    <div className=\"list-block\" id=\"block-4\" style={menuBackground}>\r\n                        <ArrestsList />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","// React module imports. \r\nimport React from \"react\";\r\n// Local imports.\r\nimport SortButtons from \"../../../elements/SortButtons/SortButtons\"\r\nimport { useThemeObject } from \"../../../hooks/themeHooks\";\r\n// Style imports. \r\nimport './Sort.css';\r\n\r\n\r\nconst Sort = () => {\r\n\r\n    // Get theme objects and variables\r\n    const background = useThemeObject(\"backgroundColor\", \"border\");\r\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\r\n\r\n    return (\r\n        <div className=\"sort\" style={background}>\r\n            <p id=\"sort-label\" style={primaryText}>Sort by Karma</p>\r\n            <SortButtons />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sort;","// React module imports.\r\nimport React from \"react\";\r\n// Local imports.\r\nimport { useThemeObject } from \"../../hooks/themeHooks\";\r\nimport SubredditList from \"../../elements/SubredditList/SubredditList\";\r\nimport Sort from \"../Header/Sort/Sort\";\r\nimport ArrestsList from \"../../elements/ArrestsList/ArrestsList\";\r\n// Style imports.\r\nimport './Sidebar.css';\r\n\r\n\r\nconst SubredditMenu = () => {\r\n\r\n    // Get theme objects and variables\r\n    const background = useThemeObject(\"backgroundColor\", \"border\");\r\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\r\n\r\n    return (\r\n        <div className=\"Sidebar\">\r\n            <div className=\"sidebar-sort\" style={background}>\r\n                <Sort />\r\n            </div>\r\n            <div className=\"sidebar-sr-list\" style={background}>\r\n                <p className=\"sidebar-sr-label\" style={primaryText}>Subreddit</p>\r\n                <SubredditList />\r\n            </div>\r\n            <div className=\"sidebar-arrests-list\" style={background}>\r\n            <p className=\"sidebar-arrests-label\" style={primaryText}>Arrested Users</p> \r\n                <ArrestsList />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SubredditMenu;\r\n","// React module imports.\r\nimport React from \"react\";\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\n// Local imports.\r\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\r\n// Style imports.\r\nimport \"./UserInfo.css\";\r\n\r\n\r\nconst UserInfo = ({ post }) => {\r\n\r\n    const {\r\n        userData: {\r\n            pfp,\r\n            username\r\n        }\r\n    } = post;\r\n\r\n    // Get theme colors. \r\n    const themeColors = useThemeColors();\r\n    const accentColor = themeColors.accent;\r\n\r\n\r\n    const imageUrl = pfp;\r\n    const shortUrl = imageUrl && imageUrl.split(\"?\")[0];\r\n    const imageSize = '40px';\r\n    const iconSize = \"40\";\r\n\r\n\r\n    return (\r\n        <div className=\"user\">\r\n            {imageUrl ? (\r\n                <img\r\n                    className=\"user-pfp\"\r\n                    src={shortUrl}\r\n                    alt=\"Post Author PfP\"\r\n                    width={imageSize}\r\n                    height={imageSize}>\r\n                </img>\r\n            ) : (\r\n                <FaUserCircle color={accentColor} size={iconSize} />\r\n            )}\r\n            <p className=\"username\">{username}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserInfo;","// React module imports.\r\nimport React, { useState } from \"react\";\r\nimport { FaArrowAltCircleLeft, FaArrowAltCircleRight } from \"react-icons/fa\";\r\n// Local imports.\r\nimport { useThemeColors } from \"../../../../../../hooks/themeHooks\";\r\n// Style imports. \r\nimport './GalleryViewer.css';\r\n\r\nconst GalleryViewer = ({ images }) => {\r\n\r\n    const iconSize = \"60\";\r\n\r\n    // Get theme variables.\r\n    const themeColors = useThemeColors();\r\n    const buttonColor = themeColors.accent;\r\n\r\n    // Create and manage gallery index state.\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n    const handlePrevious = () => {\r\n        setCurrentIndex((prevIndex) => prevIndex - 1);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        setCurrentIndex((prevIndex) => prevIndex + 1);\r\n    };\r\n\r\n    const currentImage = images[currentIndex];\r\n\r\n    return (\r\n        <div className=\"gallery-viewer\">\r\n            {currentIndex > 0 ? (\r\n                <FaArrowAltCircleLeft\r\n                    className=\"gallery-viewer-button\"\r\n                    size={iconSize}\r\n                    color={buttonColor}\r\n                    onClick={handlePrevious} />\r\n            ) : <></>}\r\n\r\n            <img src={currentImage} alt=\"Gallery img\" />\r\n\r\n            {currentIndex < images.length - 1 ? (\r\n                <FaArrowAltCircleRight\r\n                    className=\"gallery-viewer-button\"\r\n                    size={iconSize}\r\n                    color={buttonColor}\r\n                    onClick={handleNext} />\r\n            ) : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GalleryViewer;\r\n","// React module imports. \r\nimport React from \"react\";\r\nimport he from 'he';\r\nimport styled from 'styled-components';\r\n// Local imports.\r\nimport GalleryViewer from \"./GalleryViewer/GalleryViewer\";\r\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\r\n// Style imports.\r\nimport './PostMedia.css';\r\n\r\n// Create a styled component that will apply the theme colors.\r\nconst StyledLink = styled.a`\r\n    color: ${props => props.themeColor};\r\n\r\n    &:link {\r\n    color: ${props => props.themeColor};\r\n    }\r\n\r\n    &:visited {\r\n    color: ${props => props.themeColor};\r\n    }`;\r\n\r\nconst PostMedia = ({ post }) => {\r\n\r\n    const {\r\n        galleryData,\r\n        mediaMetaData,\r\n        crossposts,\r\n        media,\r\n        postHint,\r\n        isVideo,\r\n        urlOverridden,\r\n        url,\r\n        postTitle\r\n    } = post;\r\n\r\n    // Decode urls.\r\n    const decodedUrl = he.decode(url);\r\n    const decodedUrlOverridden = he.decode(url);\r\n\r\n    // Get theme colors.\r\n    const themeColors = useThemeColors();\r\n    const accentColor = themeColors.accent;\r\n\r\n\r\n    // Extract decoded URLs from galleryData\r\n    let galleryImages = [];\r\n    if (galleryData) {\r\n        galleryImages = galleryData.items.map((item) => {\r\n            const galleryImageUrl = mediaMetaData && mediaMetaData[item.media_id].s.u;\r\n            // Remove escaped & character encodings from URL.\r\n            return galleryImageUrl && he.decode(galleryImageUrl);\r\n        });\r\n    }\r\n\r\n    let crosspostGalleryImages = [];\r\n    if (crossposts && crossposts[0].gallery_data) {\r\n        crosspostGalleryImages = crossposts[0].gallery_data.items.map((item) => {\r\n            const galleryImageUrl = crossposts[0].media_metadata && crossposts[0].media_metadata[item.media_id].s.u;\r\n            // Remove escaped & character encodings from URL.\r\n            return galleryImageUrl && he.decode(galleryImageUrl);\r\n        });\r\n    }\r\n\r\n    const renderMedia = () => {\r\n        if (media && media.type === \"youtube.com\") {\r\n            return renderYoutubeVideo();\r\n        } else if (media && media.reddit_video) {\r\n            return renderRedditVideo();\r\n        } else if (crossposts) {\r\n            if (crossposts[0].media && crossposts[0].media.reddit_video) {\r\n                return renderCrosspostRedditVideo();\r\n            } else if (crossposts[0].gallery_data) {\r\n                return renderCrosspostImageGallery();\r\n            } else if (postHint === \"image\" && !crossposts[0].is_video && !crossposts[0].media) {\r\n                return renderImage();\r\n            } else if (crossposts[0].removed_by_category === \"deleted\") {\r\n                return <p className=\"error-message\">This post has been deleted.</p>\r\n            } else {\r\n                console.log(\"Crosspost Error - Media Type Not Recognised\");\r\n                console.log(post);\r\n                return;\r\n            }\r\n        } else if (postHint === \"image\" && !isVideo && !media) {\r\n            return renderImage();\r\n        } else if (galleryData) {\r\n            return renderImageGallery();\r\n        } else if (postHint === \"link\") {\r\n            return renderUrl();\r\n        } else if (urlOverridden) {\r\n            return renderUrlOverridden();\r\n        } else {\r\n            return <></>;\r\n        }\r\n    }\r\n\r\n    const renderYoutubeVideo = () => {\r\n        const videoUrl = media.oembed.html.match(/src=[\"'](.*?)[\"']/)[1];\r\n        const videoTitle = he.decode(media.oembed.title);\r\n        return (\r\n            <div className=\"youtube-video-container\">\r\n                <iframe\r\n                    className=\"video\"\r\n                    title={videoTitle}\r\n                    src={videoUrl}\r\n                    allowFullScreen>\r\n                </iframe>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderRedditVideo = () => {\r\n        const decodedUrl = he.decode(media.reddit_video.fallback_url);\r\n        return (\r\n            <div className=\"reddit-video-container\">\r\n                <iframe\r\n                    className=\"video\"\r\n                    title={postTitle}\r\n                    width={media.reddit_video.width}\r\n                    height={media.reddit_video.height}\r\n                    src={decodedUrl}>\r\n                </iframe>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderCrosspostRedditVideo = () => {\r\n        const decodedUrl = he.decode(crossposts[0].media.reddit_video.fallback_url);\r\n        return (\r\n            <div className=\"reddit-video-container\">\r\n                <iframe\r\n                    className=\"video\"\r\n                    title={postTitle}\r\n                    width={crossposts[0].media.reddit_video.width}\r\n                    height={crossposts[0].media.reddit_video.height}\r\n                    src={decodedUrl}>\r\n                </iframe>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderImage = () => {\r\n        return (\r\n            <div className=\"image-container\">\r\n                <img className=\"post-image\" src={decodedUrl} alt=\"\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderImageGallery = () => {\r\n        return (\r\n            <div className=\"image-container\">\r\n                {galleryImages.length > 0 && <GalleryViewer images={galleryImages} />}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderCrosspostImageGallery = () => {\r\n        return (\r\n            <div className=\"image-container\">\r\n                {crosspostGalleryImages.length > 0 && <GalleryViewer images={crosspostGalleryImages} />}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderUrl = () => {\r\n        return (\r\n            <div className=\"link-container\">\r\n                <StyledLink href={decodedUrl} target=\"_blank\" rel=\"noopener noreferrer\" themeColor={accentColor}>\r\n                    {decodedUrl}\r\n                </StyledLink>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderUrlOverridden = () => {\r\n        return (\r\n            <div className=\"link-container\">\r\n                <StyledLink href={decodedUrlOverridden} target=\"_blank\" rel=\"noopener noreferrer\" themeColor={accentColor}>\r\n                    {decodedUrlOverridden}\r\n                </StyledLink>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {renderMedia()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostMedia;","// React module imports.\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport styled from 'styled-components';\r\nimport he from 'he';\r\nimport DOMPurify from 'dompurify';\r\n// Local imports.\r\nimport { useThemeColors } from \"../../../../../hooks/themeHooks\";\r\n// Style imports. \r\nimport './PostText.css';\r\n\r\n// Create styled component for post text. \r\n// Workaround for styling child html entities whilst using dangerouslySetInnerHtml\r\nconst PostTextContainer = styled.div`\r\n    a {\r\n        color: ${props => props.linkColor};\r\n        word-wrap: break-word;\r\n        overflow-wrap: break-word;\r\n    }\r\n\r\n    h1, h2, h3, h4, h5, h6 {\r\n        padding-top: 20px;\r\n        color: ${props => props.headingColor};\r\n    }\r\n\r\n    p {\r\n        color: ${props => props.textColor};\r\n        margin-left: 0px;\r\n    }\r\n\r\n    table {\r\n        width: 40%;\r\n    }\r\n\r\n    th {\r\n        color: ${props => props.headingColor};\r\n    }\r\n\r\n    tr {\r\n        color: ${props => props.textColor};\r\n    }\r\n    `;\r\n\r\nconst PostText = ({ post }) => {\r\n\r\n    // Destuctured values from post prop.\r\n    const {\r\n        postText,\r\n        crossposts\r\n    } = post;\r\n\r\n    // Vars for text rendering.\r\n    let decodedText = \"\";\r\n    let sanitisedHTML = \"\";\r\n\r\n    if (crossposts) {\r\n        // Decode and sanitise html entities from crosspost text.\r\n        decodedText = crossposts[0].selftext_html && he.decode(crossposts[0].selftext_html);\r\n        sanitisedHTML = DOMPurify.sanitize(decodedText);\r\n    } else {\r\n        // Decode and sanitise html entities from post text.\r\n        decodedText = postText && he.decode(postText);\r\n        sanitisedHTML = DOMPurify.sanitize(decodedText);\r\n    }\r\n\r\n    // Create a reference to the post text container. \r\n    const postTextRef = useRef(null);\r\n    const host = window.location.origin;\r\n    const reddit = 'https://www.reddit.com/';\r\n\r\n    useEffect(() => {\r\n        if (postTextRef.current) {\r\n            const links = postTextRef.current.getElementsByTagName('a');\r\n            for (let i = 0; i < links.length; i++) {\r\n                if (links[i].href.startsWith(host)) {\r\n                    links[i].href = links[i].href.replace(host, reddit);\r\n                }\r\n                links[i].target = '_blank';\r\n                links[i].rel = 'noopener noreferrer';\r\n            }\r\n        }\r\n    }, [decodedText]);\r\n\r\n\r\n\r\n    // Get theme color variables. \r\n    const themeColors = useThemeColors();\r\n\r\n    const linkColor = themeColors.accent;\r\n    const textColor = themeColors.secondaryText;\r\n    const headingColor = themeColors.primaryText;\r\n\r\n    return (\r\n        <PostTextContainer\r\n            className=\"post-text\"\r\n            dangerouslySetInnerHTML={{ __html: sanitisedHTML }}\r\n            linkColor={linkColor}\r\n            textColor={textColor}\r\n            headingColor={headingColor}\r\n            ref={postTextRef}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PostText;\r\n","// React module imports.\r\nimport React from \"react\";\r\nimport he from 'he';\r\n// Local imports.\r\nimport PostMedia from \"./PostMedia/PostMedia\";\r\nimport PostText from \"./PostText/PostText\";\r\nimport { useThemeObject } from \"../../../../hooks/themeHooks\";\r\n// Style imports. \r\nimport \"./CardContent.css\";\r\n\r\nconst CardContent = ({ post }) => {\r\n    // Destructured values from object.\r\n    const {\r\n        postTitle,\r\n        pollData,\r\n    } = post;\r\n\r\n    // Get style variables. \r\n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\r\n\r\n    // Decode html entities from post title. \r\n    const decodedTitle = postTitle && he.decode(postTitle);\r\n\r\n    const renderPoll = () => {\r\n        if (pollData) {\r\n            return (\r\n                <div className=\"poll-container\">\r\n                    <p>Reddit Poll - Not currently voteable, click \"View Poll\" to vote on Reddit.com</p>\r\n                    <ul>\r\n                        {pollData.options.map((option) => (\r\n                            <li key={option.id}>{option.text}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-content\" style={borderColor}>\r\n            <p className=\"post-title\">{decodedTitle}</p>\r\n            <PostMedia\r\n                post={post}\r\n            />\r\n            { renderPoll() }\r\n            <PostText post={post} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardContent;\r\n","// React module imports.\r\nimport React from \"react\";\r\nimport { FaYinYang, FaRegClock, FaRegComment } from \"react-icons/fa\";\r\n// Local imports.\r\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\r\n// Style imports.\r\nimport \"./PostInfo.css\";\r\n\r\n\r\nconst PostInfo = ({ post }) => {\r\n\r\n    const {\r\n        created,\r\n        comments,\r\n        userData: { karma }\r\n    } = post;\r\n\r\n    // Get theme colors. \r\n    const themeColors = useThemeColors();\r\n    const accentColor = themeColors.accent;\r\n\r\n    const iconSize = 20;\r\n\r\n    // Calculate time data. \r\n    let timeStamp = new Date(created * 1000);\r\n    let currentTime = Date.now();\r\n    let unit = \"\";\r\n    let value = 0;\r\n    const seconds = (currentTime - timeStamp) / 1000;\r\n    const minutes = Math.round(seconds / 60);\r\n    const hours = Math.round(minutes / 60);\r\n    const days = Math.floor(hours / 24);\r\n\r\n    // Determine unit to be displayed.\r\n    if (days > 0) {\r\n        unit = \"Day\";\r\n        value = days;\r\n    } if (days === 0) {\r\n        unit = \"Hour\";\r\n        value = hours;\r\n    } if (hours === 0) {\r\n        unit = \"Minute\";\r\n        value = minutes;\r\n    } if (minutes === 0) {\r\n        unit = \"Second\";\r\n        value = seconds;\r\n    }\r\n\r\n    // Pluralise if necessary.\r\n    if (value > 1) {\r\n        unit += 's';\r\n    }\r\n\r\n    return (\r\n        <div className=\"post-info\">\r\n            <div className=\"karma-score\">\r\n                <FaYinYang color={accentColor} size={iconSize} />\r\n                <span>{karma}</span>\r\n            </div>\r\n            <div className=\"post-age\">\r\n                <FaRegClock color={accentColor} size={iconSize} />\r\n                <span>{value} {unit}</span>\r\n            </div>\r\n            <div className=\"post-comments\">\r\n                <FaRegComment color={accentColor} size={iconSize} />\r\n                <span>{comments}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostInfo;","// React module imports.\r\nimport React from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { GiHandcuffs } from \"react-icons/gi\";\r\n// Local imports.\r\nimport { addArrestedUser } from \"../../../../redux/arrestedSlice\";\r\nimport { useThemeColors } from \"../../../../hooks/themeHooks\";\r\n// Style imports.\r\nimport \"./ArrestAction.css\";\r\n\r\nconst ArrestAction = ({ post }) => {\r\n    const {\r\n        userData: { username }\r\n    } = post;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const themeColors = useThemeColors();\r\n    const accentColor = themeColors.accent;\r\n\r\n    const handleArrest = () => { \r\n        dispatch(addArrestedUser(username));\r\n    }\r\n\r\n    const iconSize = \"40\";\r\n    return (\r\n        <div className=\"arrest\" onClick={handleArrest}>\r\n            <GiHandcuffs className=\"cuffs\" color={accentColor} size={iconSize} /> <span>Arrest This Man/Girl</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArrestAction;\r\n","// React module imports.\r\nimport React from \"react\";\r\n// Local imports.\r\nimport { useThemeObject } from '../../../hooks/themeHooks';\r\nimport UserInfo from \"./UserInfo/UserInfo\";\r\nimport CardContent from \"./CardContent/CardContent\";\r\nimport PostInfo from \"./PostInfo/PostInfo\";\r\nimport ArrestAction from \"./ArrestAction/ArrestAction\";\r\n// Style imports.\r\nimport './Card.css';\r\n\r\n// Card.js\r\nconst Card = ({ post }) => {\r\n\r\n    // Inline style variables.\r\n    const primaryText = useThemeObject(\"color\", \"primaryText\");\r\n    const borderColor = useThemeObject(\"backgroundColor\", \"border\");\r\n\r\n    return (\r\n        <div className=\"card-container\" style={primaryText}>\r\n            <UserInfo post={post} />\r\n            <div className=\"card\" style={borderColor}>\r\n                <CardContent\r\n                    post={post}\r\n                />\r\n                <PostInfo\r\n                    post={post}\r\n                />\r\n            </div>\r\n            <ArrestAction post={post} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","// subredditDataSlice.js\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst subredditDataSlice = createSlice({\r\n  name: 'subredditData',\r\n  initialState: [],\r\n  reducers: {\r\n    setSubredditData: (state, action) => {\r\n      return action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setSubredditData } = subredditDataSlice.actions;\r\n\r\nexport const selectSubredditData = state => state.subredditData;\r\n\r\nexport default subredditDataSlice.reducer;\r\n","// React module imports.\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// Local imports. \r\nimport Card from './Card/Card';\r\nimport { setSubredditData, selectSubredditData } from \"../../redux/subredditDataSlice\";\r\nimport { selectSubreddit } from \"../../redux/subredditSlice\";\r\nimport { selectSort } from \"../../redux/sortSlice\";\r\nimport { selectArrestedUsers } from \"../../redux/arrestedSlice\";\r\n// Style imports.\r\n\r\n\r\nconst Posts = () => {\r\n\r\n    // Get and manage current subreddit and subreddit data. \r\n    const dispatch = useDispatch();\r\n    const subredditData = useSelector(selectSubredditData);\r\n    const currentSubreddit = useSelector(selectSubreddit);\r\n    const arrestedUsers = useSelector(selectArrestedUsers);\r\n\r\n    const fetchSubreddits = async () => {\r\n        try {\r\n            const subredditName = currentSubreddit;\r\n            const response = await fetch(`https://www.reddit.com/${subredditName}.json`);\r\n            const data = await response.json();\r\n\r\n            // Fetch the user data for each post\r\n            const postsWithUserData = await Promise.all(\r\n                data.data.children.map(async child => {\r\n                    const post = {\r\n                        postTitle: child.data.title,\r\n                        username: child.data.author,\r\n                        created: child.data.created,\r\n                        comments: child.data.num_comments,\r\n                        postHint: child.data.post_hint,\r\n                        url: child.data.url,\r\n                        postText: child.data.selftext_html,\r\n                        media: child.data.media,\r\n                        isVideo: child.data.is_video,\r\n                        pollData: child.data.poll_data,\r\n                        galleryData: child.data.gallery_data,\r\n                        mediaMetaData: child.data.media_metadata,\r\n                        crossposts: child.data.crosspost_parent_list,\r\n                        urlOverridden: child.data.url_overridden_by_dest\r\n                    };\r\n\r\n                    // Fetch the user data\r\n                    const userDataResponse = await fetch(`https://www.reddit.com/user/${post.username}/about.json`);\r\n                    const userData = await userDataResponse.json();\r\n\r\n                    // Add the user data to the post, only keeping the fields we need\r\n                    post.userData = {\r\n                        username: userData.data.name,\r\n                        karma: userData.data.total_karma,\r\n                        pfp: userData.data.icon_img\r\n                    };\r\n\r\n                    return post;\r\n                })\r\n            );\r\n\r\n            // Update your app's state or Redux store with the fetched subreddits\r\n            dispatch(setSubredditData(postsWithUserData));\r\n        } catch (error) {\r\n            console.error(\"Error fetching subreddits:\", error);\r\n            // Handle error appropriately\r\n        }\r\n    };\r\n\r\n\r\n    // Call the fetchSubreddits function to trigger the API request and update Redux state\r\n    useEffect(() => {\r\n        fetchSubreddits();\r\n        window.scrollTo(0, 0); // Go to top of page. \r\n    }, [currentSubreddit]);\r\n\r\n    // Filter posts by checking if post author is in arrested users list\r\n    const filteredPosts = subredditData.filter(post => !arrestedUsers.includes(post.username));\r\n\r\n    // Create a new, sorted array of posts based on sort state.\r\n    const sortOrder = useSelector(selectSort);\r\n    let sortedSubredditData = [];\r\n\r\n    if (sortOrder === \"descending\") {\r\n        sortedSubredditData = [...filteredPosts]\r\n            .sort((a, b) => b.userData.karma - a.userData.karma);\r\n    } else {\r\n        sortedSubredditData = [...filteredPosts]\r\n            .sort((a, b) => a.userData.karma - b.userData.karma);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {sortedSubredditData.length > 0 ? (\r\n                sortedSubredditData\r\n                    .map((post, i) => (\r\n                        <Card\r\n                            post={post}\r\n                            key={i}\r\n                        />\r\n                    ))\r\n            ) : (\r\n                <p>Loading...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default Posts;","// React module imports.\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n// Local imports.\r\nimport { useThemeColors, useThemeObject } from '../../hooks/themeHooks';\r\nimport { selectTheme } from '../../redux/themeSlice';\r\nimport { selectMenuButtonState } from '../../redux/menuButtonSlice';\r\nimport Header from '../../components/Header/Header';\r\nimport Sidebar from '../../components/Sidebar/Sidebar';\r\nimport Posts from '../../components/Posts/Posts';\r\n// Style imports\r\nimport './App.css';\r\nimport '../../stylesheets/globalStyles.css';\r\n\r\n\r\nexport default function App() {\r\n\r\n  // Get & manage theme state and theme variables.\r\n  const theme = useSelector(selectTheme);\r\n  const themeColors = useThemeColors();\r\n\r\n  // Inline style object.\r\n  const background = useThemeObject(\"backgroundColor\", \"background\");\r\n\r\n  // Update the CSS class of the body when the theme changes.\r\n  useEffect(() => {\r\n    document.body.className = theme;\r\n  }, [theme]);\r\n\r\n  // Set body element to background colour from theme.\r\n  document.body.style.backgroundColor = themeColors.background;\r\n\r\n  // Blur the site when the menu is open. \r\n  const menuButtonState = useSelector(selectMenuButtonState);\r\n\r\n  useEffect(() => {\r\n    const pageContainer = document.querySelector('.main-content');\r\n\r\n    if (menuButtonState === 'open') {\r\n      pageContainer.classList.add('blur');\r\n    } else {\r\n      pageContainer.classList.remove('blur');\r\n    }\r\n  }, [menuButtonState]);\r\n\r\n\r\n  return (\r\n    <div className=\"page-container\" style={background}>\r\n      <div className=\"container-wrap\">\r\n        <div className=\"App\">\r\n          <Header />\r\n          <div className='main-content'>\r\n            <Posts />\r\n          </div>\r\n          <div className='sidebar-container desktop'>\r\n            <Sidebar />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport themeReducer from './themeSlice';\r\nimport sortReducer from './sortSlice';\r\nimport subredditReducer from './subredditSlice';\r\nimport menuButtonReducer from './menuButtonSlice';\r\nimport subredditButtonReducer from './subredditButtonSlice';\r\nimport subredditDataReducer from './subredditDataSlice';\r\nimport arrestedReducer from './arrestedSlice';\r\nimport arrestedButtonReducer from './arrestedButtonSlice';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    theme: themeReducer,\r\n    sort: sortReducer,\r\n    subreddit: subredditReducer,\r\n    menu: menuButtonReducer,\r\n    subredditButton: subredditButtonReducer,\r\n    subredditData: subredditDataReducer,\r\n    arrested: arrestedReducer,\r\n    arrestedButton: arrestedButtonReducer\r\n  },\r\n})\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './stylesheets/reset.css';\r\nimport './stylesheets/index.css';\r\nimport './stylesheets/globalStyles.css';\r\nimport App from './containers/App/App';\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}